{"version":3,"sources":["config/logsHandler.js","config/ordersStateHandler.js","config/allocationAndBalancing.js","config/metadataHandler.js","objects/taquero.js","objects/quesadillero.js","App.js","index.js"],"names":["Handler","setLogsFunction","log","title","message","logs","JSON","parse","localStorage","getItem","unshift","time","Date","now","setItem","stringify","setOrdersFunction","taqueroType","getOrders","orders","getAllOrders","setOrders","generalOrders","pushOrder","order","push","taqueros","taqueroTypes","logsHandler","timeout","ms","Promise","resolve","setTimeout","validMeatTypes","res","i","length","type","j","canWorkOn","meatType","includes","getValidMeatTipesForTaqueros","validIngredients","handlers","name","OrdersHandler","rejected","done","allocateOrder","min","listSize","getQueueSize","taqueroIndex","taquero","taqueroCanWorkOnOrder","insertTaquero","orderIsComplete","completeOrder","status","request_id","handleEmptyOrder","insertToQueue","filteredOrder","invalid","tacoCounter","rejectOrder","datetime","toString","aPartIsInvalid","orden","part","quantity","part_id","split","orderId","subOrderId","parseInt","rejectPart","cuantity","meat","ingredients","ingredient","delay_counter","finished_products","response","temp","e","reazon","partId","getQuesadillasInStock","watchForOrdersToReallocate","a","ordersLeft","start","input","setMetadataFunction","taqueroName","consumeFillings","fillingNames","metadata","getMetadata","fillingName","fillings","setMetadata","attribute","value","generalMetadata","useTortilla","tortillas","madeTacos","queueLength","workingOn","rest","untilNeeded","fan","Taquero","ordersSetter","ordersHandler","metadataHandler","MetadataHandler","queue","quesadillasInStock","getPartToParticipate","parts","putFillings","reAllocateOrder","rest1Second","meta","timeRested","startWorking","workOnNextOrder","partIndex","shift","newStock","who","when","toISOString","what","newElements","giveQuesadilla","Quesadillero","index","quesadillasReady","App","useState","isRunning","setIsRunning","firstLoad","setFirstLoad","config","cilantro","cebolla","salsa","guacamole","chrono","setChrono","setLogs","LogsHandler","defaultQueues","types","getDefaultQueuesFor","defaultTaqueroMetadata","active","defaultQuesadilleroMetadata","getDefaultMetadataFor","map","quesadillero","allocationBalanceHandler","AllocationHandler","formatTimeForLogs","timestamp","date","getHours","getMinutes","getSeconds","getMilliseconds","ordersAreFinished","startRUDA","sampleInput","counter","toFixed","useEffect","className","src","alt","onClick","indexOf","Object","keys","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wyEAWeA,G,MAXC,SAACC,GAQf,MAAO,CAAEC,IAPG,SAACC,EAAOC,GAClB,IAAIC,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,SAC3CJ,EAAKK,QAAQ,CAAEP,QAAOC,UAASO,KAAMC,KAAKC,QAC1CZ,EAAgBI,GAChBG,aAAaM,QAAQ,OAAQR,KAAKS,UAAUV,Q,OCkBjCL,EAvBC,SAACgB,EAAmBC,GAClC,IAAMC,EAAY,WAChB,IAAMC,EAASX,aAAaC,QAAQ,UACpC,OAAOH,KAAKC,MAAMY,IAiBpB,MAAO,CAAEC,aAAcF,EAAWG,UAPhB,SAACF,GACjB,IAAIG,EAAgBJ,IACpBI,EAAcL,GAAeE,EAC7BH,EAAkBM,GAClBd,aAAaM,QAAQ,SAAUR,KAAKS,UAAUO,KAGHC,UAd3B,SAACC,GACjB,IAAIF,EAAgBJ,IACpBI,EAAcL,GAAaQ,KAAKD,GAChCR,EAAkBM,GAClBd,aAAaM,QAAQ,SAAUR,KAAKS,UAAUO,OC0PnCtB,EAjQC,SAAC0B,EAAUC,EAAcC,EAAaZ,GAkBpD,IAjBA,IAAMa,EAAU,SAACC,GAAD,OAAQ,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OAc/DI,EAZ+B,SAACP,GAEpC,IADA,IAAIQ,EAAM,GACDC,EAAI,EAAGA,EAAIT,EAAaU,OAAQD,IAEvC,IADA,IAAME,EAAOX,EAAaS,GACjBG,EAAI,EAAGA,EAAID,EAAKE,UAAUH,OAAQE,IAAK,CAC9C,IAAME,EAAWH,EAAKE,UAAUD,GAC3BJ,EAAIO,SAASD,IAAWN,EAAIV,KAAKgB,GAG1C,OAAON,EAGcQ,CAA6BhB,GAC9CiB,EAAmB,CAAC,WAAY,UAAW,QAAS,aACtDC,EAAW,GACNT,EAAI,EAAGA,EAAIT,EAAaU,OAAQD,IAAK,CAC5C,IAAMnB,EAAcU,EAAaS,GACjCS,EAAS5B,EAAY6B,MAAQC,EAC3B/B,EACAC,EAAY6B,MAGhBD,EAASG,SAAWD,EAAc/B,EAAmB,YACrD6B,EAASI,KAAOF,EAAc/B,EAAmB,QAEjD,IAAMkC,EAAgB,SAAC1B,GAMrB,IALA,IAAI2B,EAAM,CACRL,KAAM,KACNM,SAAU1B,EAAS,GAAG2B,eACtBC,cAAe,GAERlB,EAAI,EAAGA,EAAIV,EAASW,OAAQD,IAAK,CACxC,IAAMmB,EAAU7B,EAASU,GACpBoB,EAAsBD,EAAS/B,KAChC+B,EAAQF,gBAAkBF,EAAIC,WAChCD,EAAM,CACJL,KAAMS,EAAQT,KACdM,SAAUG,EAAQF,eAClBC,aAAclB,KAIpB,GAAiB,OAAbe,EAAIL,KAEN,OADAW,EAAcN,EAAIG,aAAc,CAAC9B,KAC1B,EACF,GAAIkC,EAAgBlC,GAEzB,OADAmC,EAAcnC,IACP,EAEP,IAAML,EAASb,KAAKC,MAAMC,aAAaC,QAAQ,uBAK/C,OAJAD,aAAaM,QACX,qBACAR,KAAKS,UAAL,sBAAmBI,GAAnB,CAA2BK,OAEtB,GAILmC,EAAgB,SAACnC,GACrBA,EAAMoC,OAAS,OACff,EAASI,KAAK1B,UAAUC,GACxBI,EAAY1B,IACV,4BADF,gBAEWsB,EAAMqC,WAFjB,eAMIC,EAAmB,SAACtC,GACxBA,EAAMoC,OAAS,OACff,EAASI,KAAK1B,UAAUC,GACxBI,EAAY1B,IACV,4BADF,gBAEWsB,EAAMqC,WAFjB,8BAMIJ,EAAgB,SAACH,EAAcnC,GACnCO,EAAS4B,GAAcS,cAAc5C,IAGjC6C,EAAgB,SAACxC,GACrB,IAAMyC,EAAU,CAAEA,SAAS,GACvBC,EAAc,EAElB,IACE,GAAgC,kBAArB1C,EAAMqC,YAA2BrC,EAAMqC,WAAa,EAE7D,OADAM,EAAY3C,EAAO,cACZyC,EAET,GAA4C,iBAAxC,IAAIrD,KAAKY,EAAM4C,UAAUC,WAE3B,OADAF,EAAY3C,EAAO,gBACZyC,EAET,GAAqB,SAAjBzC,EAAMoC,OAER,OADAO,EAAY3C,EAAO,kBACZyC,EAET,IAAIK,GAAiB,EACrB,GAAI9C,EAAM+C,MAAMlC,OAAS,GAAI,OAAO4B,EACpC,IAAK,IAAI7B,EAAI,EAAGA,EAAIZ,EAAM+C,MAAMlC,OAAQD,IAAK,CAC3C,IAAMoC,EAAOhD,EAAM+C,MAAMnC,GAEzB,IADA8B,GAAeM,EAAKC,UAlBR,IAqBV,OADAN,EAAY3C,EAAO,wCACZyC,EALkC,MAObO,EAAKE,QAAQC,MAAM,KAPN,mBAOpCC,EAPoC,KAO3BC,EAP2B,KAQ3C,GAAIC,SAASF,KAAapD,EAAMqC,WAMhC,GACEiB,SAASD,GAAcrD,EAAM+C,MAAMlC,QACnCyC,SAASD,KAAgBzC,EAEzB2C,EAAW,KAAM,cACjBT,GAAiB,SACV9C,EAAM+C,MAAMnC,QAGrB,GAAIoC,EAAKQ,SAAW,IAClBD,EAAWP,EAAKE,QAAS,8BACzBJ,GAAiB,SACV9C,EAAM+C,MAAMnC,QAGrB,GAAKF,EAAeQ,SAAS8B,EAAKS,MASlC,GAAK,CAAC,OAAQ,cAAcvC,SAAS8B,EAAKlC,MAS1C,GAAoB,SAAhBkC,EAAKZ,OAAT,CASA,IAAK,IAAIrB,EAAI,EAAGA,EAAIiC,EAAKU,YAAY7C,OAAQE,IAAK,CAChD,IAAM4C,EAAaX,EAAKU,YAAY3C,GAC/BK,EAAiBF,SAASyC,KAC7BJ,EACEP,EAAKE,QADG,WAEJS,EAFI,gCAIVb,GAAiB,SACV9C,EAAM+C,MAAMnC,IAIvBZ,EAAM+C,MAAMnC,GAAGgD,cAAgB,EAC/B5D,EAAM+C,MAAMnC,GAAGiD,kBAAoB,EACnC7D,EAAM8D,SAAW,QAtBfP,EACEP,EAAKE,QADG,WAEJF,EAAKZ,OAFD,oCAIVU,GAAiB,SACV9C,EAAM+C,MAAMnC,QAdnB2C,EACEP,EAAKE,QADG,WAEJF,EAAKlC,KAFD,qCAIVgC,GAAiB,SACV9C,EAAM+C,MAAMnC,QAdnB2C,EACEP,EAAKE,QADG,WAEJF,EAAKS,KAFD,kCAIVX,GAAiB,SACV9C,EAAM+C,MAAMnC,QA1BnB2C,EAAW,KAAM,cACjBT,GAAiB,SACV9C,EAAM+C,MAAMnC,GA6DvB,GAAIkC,EAAgB,CAClB,IAAMiB,EAAO/D,EAAM+C,MACnB/C,EAAM+C,MAAQ,GACd,IAAK,IAAInC,EAAI,EAAGA,EAAImD,EAAKlD,OAAQD,IAAK,CACpC,IAAMoC,EAAOe,EAAKnD,GACboC,GACLhD,EAAM+C,MAAM9C,KAAK+C,IAGrB,OAAOhD,EACP,MAAOgE,GACP,OAAOvB,IAILP,EAAkB,SAAClC,GACvB,IAAK,IAAIY,EAAI,EAAGA,EAAIZ,EAAM+C,MAAMlC,OAAQD,IAAK,CAE3C,GAAoB,SADPZ,EAAM+C,MAAMnC,GAChBwB,OAAmB,OAAO,EAErC,OAAO,GAGHO,EAAc,SAAC3C,EAAOiE,GAC1B7D,EAAY1B,IACV,4BADF,gBAGIsB,EAAMqC,WAAarC,EAAMqC,WAAa,kBAH1C,6BAIuB4B,IAEvB5C,EAASG,SAASzB,UAAUC,IAGxBuD,EAAa,SAACW,EAAQD,GAC1B7D,EAAY1B,IACV,4BADF,eAEUwF,GAAkB,kBAF5B,6BAEkED,KAiB9DjC,EAAwB,SAACD,EAAS/B,GACtC,IAAK,IAAIY,EAAI,EAAGA,EAAIZ,EAAM+C,MAAMlC,OAAQD,IAAK,CAC3C,IAAMoC,EAAOhD,EAAM+C,MAAMnC,GACzB,GAAoB,SAAhBoC,EAAKZ,UACS,eAAdY,EAAKlC,MAA6D,IAApCiB,EAAQoC,0BAEtCpC,EAAQf,UAAUE,SAAS8B,EAAKS,OAAO,OAAO,IAIhDW,EAA0B,uCAAG,kCAAAC,EAAA,yDAE1BvF,KAAKC,MAAMC,aAAaC,QAAQ,kBAFN,mDAK/B,IAFMU,EAASb,KAAKC,MAAMC,aAAaC,QAAQ,uBAC3CqF,EAAa,GACR1D,EAAI,EAAGA,EAAIjB,EAAOkB,OAAQD,IAC3BZ,EAAQL,EAAOiB,GACrBR,EAAY1B,IACV,4BADF,gCAE2BsB,EAAMqC,aAE5BX,EAAc1B,IAAQsE,EAAWrE,KAAKD,GAXd,OAa/BhB,aAAaM,QAAQ,qBAAsBR,KAAKS,UAAU+E,IAb3B,SAczBjE,EAAQ,KAdiB,kEAAH,qDAkBhC,MAAO,CAAEkE,MAzCK,SAACC,GACbJ,IACA,IAAK,IAAIxD,EAAI,EAAGA,EAAI4D,EAAM3D,OAAQD,IAAK,CACrC,IAAMZ,EAAQwC,EAAcgC,EAAM5D,IAC9BZ,EAAMyC,UACiB,IAAvBzC,EAAM+C,MAAMlC,OAIhBa,EAAc1B,GAHZsC,EAAiBtC,MAmCPiC,gBAAeP,kBCjNlBlD,EAjDC,SAACiG,EAAqBC,GACpC,IAAMrE,EAAU,SAACC,GAAD,OAAQ,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OAE/DqE,EAAe,uCAAG,WAAOC,GAAP,mBAAAP,EAAA,sDAClBQ,EAAWC,IACNlE,EAAI,EAFS,YAENA,EAAIgE,EAAa/D,QAFX,wBAGdkE,EAAcH,EAAahE,GACjCiE,EAASH,GAAaM,SAASD,KAJX,SAKd1E,EAAQ,KALM,OAMpB4E,EAAY,WAAYJ,EAASH,GAAaM,UAN1B,OAEmBpE,IAFnB,2DAAH,sDAUfkE,EAAc,WAClB,IAAMD,EAAW7F,aAAaC,QAAQ,YACtC,OAAOH,KAAKC,MAAM8F,IAkBdI,EAAc,SAACC,EAAWC,GAC9B,IAAIC,EAAkBN,IACtBM,EAAgBV,GAAaQ,GAAaC,EAC1CV,EAAoBW,GACpBpG,aAAaM,QAAQ,WAAYR,KAAKS,UAAU6F,KASlD,MAAO,CAAEN,cAAaG,cAAaN,kBAAiBU,YANhC,WAClB,IAAIR,EAAWC,IACfD,EAASH,GAAaY,YACtBL,EAAY,YAAaJ,EAASH,GAAaY,YAGgBC,UA5B/C,SAACtC,GACjB,IAAI4B,EAAWC,IAEfD,EAASH,GAAac,cAEtBX,EAASH,GAAae,UAAY,KAElCZ,EAASH,GAAagB,KAAKC,aAAe1C,EAE1C4B,EAASH,GAAakB,IAAID,aAAe1C,EAEzCwB,EAAoBI,GACpB7F,aAAaM,QAAQ,WAAYR,KAAKS,UAAUsF,OCkIrCgB,EA3JC,SACdvE,EACAN,EACA8E,EACArB,EACArE,GAGA,IAAMC,EAAU,SAACC,GAAD,OAAQ,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OAC/DyF,EAAgBxE,EAAcuE,EAAcxE,GAC5C0E,EAAkBC,EAAgBxB,EAAqBnD,GAGzD4E,EAAQ,GAGNxG,EAAY,WAChB,OAAOqG,EAAcnG,eAAe0B,IAGhC6C,EAAwB,WAC5B,OAAO6B,EAAgBlB,cAAcxD,GAAM6E,oBAGvCC,EAAuB,SAACC,GAC5B,IAAK,IAAIzF,EAAI,EAAGA,EAAIyF,EAAMxF,OAAQD,IAAK,CACrC,IAAMoC,EAAOqD,EAAMzF,GACnB,GACEI,EAAUE,SAAS8B,EAAKS,OACR,SAAhBT,EAAKZ,SACU,eAAdY,EAAKlC,MAAyBqD,KAA2B,GAE1D,MAAO,CAACnB,EAAMpC,GAGlB,MAAO,CAAC,KAAM,OAgBVlC,EAAM,SAACE,GACXwB,EAAY1B,IAAZ,qBAA8B4C,EAA9B,KAAuC1C,IAGnC0H,EAAW,uCAAG,WAAOtD,GAAP,SAAAqB,EAAA,sEACZ2B,EAAgBrB,gBAAgB3B,EAAKU,aADzB,2CAAH,sDAIX6C,EAAe,uCAAG,WAAOvG,GAAP,eAAAqE,EAAA,sDAChB1E,EAASb,KAAKC,MAAMC,aAAaC,QAAQ,uBAC/CD,aAAaM,QACX,qBACAR,KAAKS,UAAL,sBAAmBI,GAAnB,CAA2BK,MAJP,2CAAH,sDAQfwG,EAAW,uCAAG,4BAAAnC,EAAA,sEACZhE,EAAQ,KADI,QAEdoG,EAAOT,EAAgBlB,cAAcxD,IACpCoE,KAAKgB,aACVV,EAAgBf,YAAY,OAAQwB,EAAKf,MAJvB,2CAAH,qDAOXiB,EAAY,uCAAG,sBAAAtC,EAAA,yDAEU,IAAvB3E,IAAYmB,OAFC,gCAEmB2F,IAFnB,6CAGNI,IAHM,UAIZ9H,KAAKC,MAAMC,aAAaC,QAAQ,kBAJpB,gHAAH,qDAQZ2H,EAAe,uCAAG,wCAAAvC,EAAA,yDAEtB6B,EAAQxG,IAEFM,EAAQkG,EAAM,GAJE,EAMEE,EAAqBpG,EAAM+C,OAN7B,mBAMjBC,EANiB,KAMX6D,EANW,KAQX,OAAT7D,IACe,eAAdA,EAAKlC,MAAqD,IAA5BqD,KATX,uBAWpBoC,EAAgBL,EAAMY,SAXF,SAYdN,IAZc,wCAehBjC,EAAQnF,KAAKC,MAEnB2D,EAAKZ,OAAS,UACd4D,EAAgBf,YAAY,YAAajC,EAAKE,SAEjC,EApBS,aAoBNF,EAAKC,SAAWD,EAAKa,mBApBf,oBAsBF,eAAdb,EAAKlC,KAtBW,sBAuBdqD,IAA0B,GAvBZ,iBAwBV4C,EACJf,EAAgBlB,cAAcxD,GAAM6E,mBAAqB,EAC3DH,EAAgBf,YAAY,qBAAsB8B,GA1BlC,+BA4BhB/D,EAAKZ,OAAS,OA5BE,oCAiCpB4D,EAAgBX,cAjCI,UAkCdhF,EAAQ,KAlCM,yBAoCdiG,EAAYtD,GApCE,QAsCpBA,EAAKa,mBAAqB,EACtBb,EAAKC,WAAaD,EAAKa,oBAAmBb,EAAKZ,OAAS,QAvCxC,uCAyCtBY,EAAKZ,OAAyB,SAAhBY,EAAKZ,OAAoBY,EAAKZ,OAAS,OAErD8D,EAAM,GAAGnD,MAAM8D,GAAa7D,EAC5BkD,EAAM,GAAGpC,SAAS7D,KAAK,CACrB+G,IAAI,cAAD,OAAgB1F,GACnB2F,MAAM,IAAI7H,MAAO8H,cACjBC,KAAK,QAAD,OAAUnE,EAAKa,kBAAf,YAAoCb,EAAKS,KAAzC,YAAiDT,EAAKlC,KAAtD,kBAAoEkC,EAAKE,QAAzE,KACJ/D,KAAMC,KAAKC,MAAQkF,IAErBgC,EAAgBL,EAAMY,SACtBf,EAAclG,UAAUqG,GACxBF,EAAgBT,UAAUvC,EAAKC,UAE/BvE,EAAI,kBAAD,OAAmBsE,EAAKE,QAAxB,aAAoCgD,EAAMrF,OAA1C,UAtDmB,kBAwDfqF,EAAMrF,QAxDS,4CAAH,qDA4DrB,MAAO,CACLS,OACAiB,cArGoB,SAAC6E,GAKrB,OAJAlB,EAAK,sBAAOxG,KAAP,YAAuB0H,IAC5BrB,EAAclG,UAAUqG,GACxBxH,EAAI,YAAD,OAAa0I,EAAYvG,OAAzB,4BACHmF,EAAgBf,YAAY,cAAeiB,EAAMrF,QAC1CqF,GAiGPrE,aAAc,kBAAMnC,IAAYmB,QAChC+F,kBACAlH,YACAiH,eACA3F,YACAmD,wBACAkD,eAjHqB,WACrB,IAAMN,EAAWf,EAAgBlB,cAAcxD,GAAM6E,mBAAqB,EAC1EH,EAAgBf,YAAY,qBAAsB8B,MCAvCO,EA1CM,SAAC7C,EAAqBvE,GAEzC,IAAMG,EAAU,SAACC,GAAD,OAAQ,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OAC/D0F,EAAkBC,EAAgBxB,EAAqB,gBAoC7D,MAAO,CAAEF,MA3BE,uCAAG,gCAAAF,EAAA,yDAELvF,KAAKC,MAAMC,aAAaC,QAAQ,kBAF3B,0DAIV+G,EAAgBf,YACd,YACAe,EAAgBlB,cAAhB,aAA8CQ,UAAY,GANlD,SAQJjF,EAAQ,KARJ,OAaV,IAJIsB,EAAM,CACR4F,MAAO,KACPtE,SAAU,GAEHrC,EAAI,EAAGA,EAAIV,EAASW,OAAQD,KAC7BmB,EAAU7B,EAASU,IAEfuD,wBAA0BxC,EAAIsB,UACtClB,EAAQoC,wBAA0B,IAElCxC,EAAM,CAAE4F,MAAO3G,EAAGqC,SAAUlB,EAAQoC,0BAEtB,OAAdxC,EAAI4F,MACNrH,EAASyB,EAAI4F,OAAOF,iBA5BxBrB,EAAgBf,YACd,mBACAe,EAAgBlB,cAAhB,aAA8C0C,iBAAmB,GAIvD,2DAAH,uD,eCkWEC,EAlWH,WAAM,MAEkBC,oBAAS,GAF3B,mBAETC,EAFS,KAEEC,EAFF,OAGkBF,oBAAS,GAH3B,mBAGTG,EAHS,KAGEC,EAHF,KAIVC,EAES,CACXzC,UAAW,GACX0C,SAAU,IACVC,QAAS,IACTC,MAAO,IACPC,UAAW,KAXC,EAeYT,mBAAS,GAfrB,mBAeTU,EAfS,KAeDC,EAfC,OAgBQX,mBAAS,IAhBjB,mBAgBT7I,EAhBS,KAgBHyJ,EAhBG,KAiBVlI,EAAcmI,EAAYD,GAE1BnI,EAAe,CACnB,CAAEmB,KAAM,iBAAkBN,UAAW,CAAC,QAAS,WAC/C,CAAEM,KAAM,sBAAuBN,UAAW,CAAC,QAAS,YACpD,CAAEM,KAAM,sBAAuBN,UAAW,CAAC,QAAS,YACpD,CAAEM,KAAM,UAAWN,UAAW,CAAC,aAY3BwH,EAVsB,SAACC,GAE3B,IADA,IAAI9I,EAAS,GACJiB,EAAI,EAAGA,EAAI6H,EAAM5H,OAAQD,IAAK,CAErCjB,EADa8I,EAAM7H,GACPU,MAAQ,GAItB,OAFA3B,EAAO6B,SAAW,GAClB7B,EAAO8B,KAAO,GACP9B,EAEa+I,CAAoBvI,GAnC1B,EAoCYuH,mBAASc,GApCrB,mBAoCT7I,EApCS,KAoCDE,EApCC,KAqCV8I,EAAyB,CAC7BlD,UAAW,KACXD,YAAa,EACbI,IAAK,CACHgD,QAAQ,EACRjD,YAAa,GAEfD,KAAM,CACJC,YAAa,IACbe,WAAY,GAEdpB,UAAWyC,EAAmBzC,UAC9Ba,mBAAoB,EACpBnB,SAAU,CACRkD,MAAOH,EAAmBG,MAC1BC,UAAWJ,EAAmBI,UAC9BH,SAAUD,EAAmBC,SAC7BC,QAASF,EAAmBE,UAG1BY,EAA8B,CAClCjD,IAAK,CACHgD,QAAQ,EACRjD,YAAa,GAEfD,KAAM,CACJC,YAAa,IACbe,WAAY,GAEdpB,UAAW,GACXkC,iBAAkB,GAEdsB,EAAwB,SAACL,GAE7B,IADA,IAAI5D,EAAW,GACNjE,EAAI,EAAGA,EAAI6H,EAAM5H,OAAQD,IAAK,CAErCiE,EADa4D,EAAM7H,GACLU,MAAQqH,EAGxB,OADA9D,EAAQ,aAAmBgE,EACpBhE,GA5EO,EA8EgB6C,mBAASoB,EAAsB3I,IA9E/C,mBA8ET0E,EA9ES,KA8ECI,EA9ED,KA+EV/E,EAAWC,EAAa4I,KAAI,SAACjI,GAAD,OAChC+E,EAAQ/E,EAAKQ,KAAMR,EAAKE,UAAWnB,EAAWoF,EAAa7E,MAEvD4I,EAAe1B,EAAarC,EAAa/E,GACzC+I,EAA2BC,EAC/BhJ,EACAC,EACAC,EACAP,GASIsJ,EAAoB,SAACC,GACzB,IAAMC,EAAO,IAAIjK,KAAKgK,GACtB,MAAM,GAAN,OAAUC,EAAKC,WAAf,YAA6BD,EAAKE,aAAlC,YAAkDF,EAAKG,aAAvD,aAAwEH,EAAKI,kBAA7E,QAGIC,EAAoB,WACxB,IAAK,IAAI9I,EAAI,EAAGA,EAAIV,EAASW,OAAQD,IACnC,GAAIV,EAASU,GAAGiB,eAAiB,EAAG,OAAO,EAE7C,QAAI/C,KAAKC,MAAMC,aAAaC,QAAQ,uBAAuB4B,OAAS,IAwBhE8I,EAAS,uCAAG,gCAAAtF,EAAA,0DACZsD,EADY,iDAWhB,IATAC,GAAa,GAvCb5I,aAAaM,QAAQ,OAAQR,KAAKS,UAAU,KAC5C+I,EAAQ,IAkBRrD,EAAY6D,EAAsB3I,IAClCnB,aAAaM,QACX,WACAR,KAAKS,UAAUuJ,EAAsB3I,KAoBvCnB,aAAaM,QAAQ,gBAAiBR,KAAKS,WAAU,IAGrD0J,EAAyB1E,MAAMqF,GAGtBhJ,EAAI,EAAGA,EAAIV,EAASW,OAAQD,IACnCV,EAASU,GAAG+F,eAGdqC,EAAazE,QAETsF,EAAU,EAjBE,eAmBRxK,EAAMD,KAAKC,MAnBH,UAoBRgB,EAAQ,KApBA,YAqBVqJ,IArBU,wBAsBZ1K,aAAaM,QAAQ,gBAAiBR,KAAKS,WAAU,IAtBzC,6BAyBdsK,GAAWzK,KAAKC,MAAQA,EACxBgJ,GAAWwB,EAAU,KAAMC,QAAQ,IA1BrB,wBA4BhBlC,GAAa,GA5BG,4CAAH,qDA+BTvH,EAAU,SAACC,GACf,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OAatD,OARAyJ,qBAAU,WACJlC,IACFC,GAAa,GAhDf9I,aAAaM,QAAQ,SAAUR,KAAKS,UAAUiJ,IAC9CxJ,aAAaM,QAAQ,OAAQR,KAAKS,UAAU,KAC5CP,aAAaM,QACX,WACAR,KAAKS,UAAUuJ,EAAsB3I,KAEvCnB,aAAaM,QAAQ,qBAAsBR,KAAKS,UAAU,SAiD1D,sBAAKyK,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,qBACEC,IAAI,gFACJD,UAAU,OACVE,IAAI,SAEJvC,EAKA,qBAAKqC,UAAU,UAAf,6BAJA,wBAAQG,QAASR,EAAWK,UAAU,WAAtC,wBAMF,oBAAGA,UAAU,SAAb,cAAwB5B,EAAxB,WAEF,sBAAK4B,UAAU,mBAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,sBAAKA,UAAU,oBAAf,UAEG7J,EAAa4I,KAAI,SAACtJ,GACjB,IAAM8H,EAAQpH,EAAaiK,QAAQ3K,GACnC,OACE,sBAAiBuK,UAAU,mBAA3B,UACE,qBAAIA,UAAU,cAAd,wBAAwCvK,EAAY6B,QACpD,sBAAK0I,UAAU,2BAAf,UACE,oBAAIA,UAAU,WAAd,sBACA,sBAAKA,UAAU,8BAAf,UACE,oBAAIA,UAAU,0BAAd,8BAGA,mBAAGA,UAAU,iBAAb,SACGnF,EAASpF,EAAY6B,MAAMkE,iBAGhC,sBAAKwE,UAAU,8BAAf,UACE,oBAAIA,UAAU,0BAAd,yBACA,mBAAGA,UAAU,iBAAb,SAC4C,OAAzCnF,EAASpF,EAAY6B,MAAMmE,UACxB,OACAZ,EAASpF,EAAY6B,MAAMmE,eAGnC,sBAAKuE,UAAU,8BAAf,UACE,oBAAIA,UAAU,0BAAd,yBACA,mBAAGA,UAAU,iBAAb,SACGlL,KAAKS,UAAUsF,EAASpF,EAAY6B,MAAMsE,IAAIgD,aAGnD,sBAAKoB,UAAU,8BAAf,UACE,oBAAIA,UAAU,0BAAd,wBACA,mBAAGA,UAAU,iBAAb,kBAEF,sBAAKA,UAAU,8BAAf,UACE,oBAAIA,UAAU,0BAAd,0BACA,mBAAGA,UAAU,iBAAb,SACGnF,EAASpF,EAAY6B,MAAMoE,KAAKgB,gBAGrC,sBAAKsD,UAAU,8BAAf,UACE,oBAAIA,UAAU,0BAAd,gCAGA,mBAAGA,UAAU,iBAAb,SACGnF,EAASpF,EAAY6B,MAAMoE,KAAKC,iBAGrC,sBAAKqE,UAAU,8BAAf,UACE,oBAAIA,UAAU,0BAAd,mCAGA,mBAAGA,UAAU,iBAAb,SACGnF,EAASpF,EAAY6B,MAAM6E,wBAGhC,sBAAK6D,UAAU,8BAAf,UACE,oBAAIA,UAAU,0BAAd,uBACA,mBAAGA,UAAU,iBAAb,SACGnF,EAASpF,EAAY6B,MAAMgE,eAGhC,sBAAK0E,UAAU,8BAAf,UACE,oBAAIA,UAAU,0BAAd,uBACA,mBAAGA,UAAU,iBAAb,SACGnF,EAASpF,EAAY6B,MAAM0D,SAASgD,cAGzC,sBAAKgC,UAAU,8BAAf,UACE,oBAAIA,UAAU,0BAAd,sBACA,mBAAGA,UAAU,iBAAb,SACGnF,EAASpF,EAAY6B,MAAM0D,SAASiD,aAGzC,sBAAK+B,UAAU,8BAAf,UACE,oBAAIA,UAAU,0BAAd,oBACA,mBAAGA,UAAU,iBAAb,SACGnF,EAASpF,EAAY6B,MAAM0D,SAASkD,WAGzC,sBAAK8B,UAAU,8BAAf,UACE,oBAAIA,UAAU,0BAAd,wBACA,mBAAGA,UAAU,iBAAb,SACGnF,EAASpF,EAAY6B,MAAM0D,SAASmD,oBA/EnCZ,MAuFd,sBAAKyC,UAAU,mBAAf,UACE,oBAAIA,UAAU,cAAd,0BACA,sBAAKA,UAAU,2BAAf,UACE,oBAAIA,UAAU,WAAd,sBACA,sBAAKA,UAAU,8BAAf,UACE,oBAAIA,UAAU,0BAAd,gCAGA,mBAAGA,UAAU,iBAAb,SACGnF,EAASmE,aAAaxB,sBAG3B,sBAAKwC,UAAU,8BAAf,UACE,oBAAIA,UAAU,0BAAd,yBACA,mBAAGA,UAAU,iBAAb,SACGlL,KAAKS,UAAUsF,EAASmE,aAAapD,IAAIgD,aAG9C,sBAAKoB,UAAU,8BAAf,UACE,oBAAIA,UAAU,0BAAd,0BACA,mBAAGA,UAAU,iBAAb,SACGnF,EAASmE,aAAatD,KAAKgB,gBAGhC,sBAAKsD,UAAU,8BAAf,UACE,oBAAIA,UAAU,0BAAd,sCAGA,mBAAGA,UAAU,iBAAb,SACGnF,EAASmE,aAAatD,KAAKC,iBAGhC,sBAAKqE,UAAU,8BAAf,UACE,oBAAIA,UAAU,0BAAd,uBACA,mBAAGA,UAAU,iBAAb,SACGnF,EAASmE,aAAa1D,wBAMjC,8BACG+E,OAAOC,KAAK3K,GAAQoJ,KAAI,SAACwB,GAAD,OACvB,gCACGA,EADH,KACUzL,KAAKS,UAAUI,EAAO4K,MADtBA,WAMhB,sBAAKP,UAAU,gBAAf,UACE,oBAAIA,UAAU,YAAd,mBACA,mBAAGA,UAAU,eAAb,8CACA,qBAAKA,UAAU,uBAAf,SACGnL,EAAKkK,KAAI,SAACrK,GAAD,OACR,sBAAKsL,UAAU,eAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,oBAAIA,UAAU,WAAd,SAA0BtL,EAAIC,QAC9B,mBAAGqL,UAAU,UAAb,SAAwBb,EAAkBzK,EAAIS,WAE/CT,EAAIE,0BCnWrB4L,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a0f54352.chunk.js","sourcesContent":["const Handler = (setLogsFunction) => {\r\n  const log = (title, message) => {\r\n    let logs = JSON.parse(localStorage.getItem(\"logs\"));\r\n    logs.unshift({ title, message, time: Date.now() });\r\n    setLogsFunction(logs);\r\n    localStorage.setItem(\"logs\", JSON.stringify(logs));\r\n  };\r\n\r\n  return { log };\r\n};\r\n\r\nexport default Handler;\r\n","const Handler = (setOrdersFunction, taqueroType) => {\r\n  const getOrders = () => {\r\n    const orders = localStorage.getItem(\"orders\");\r\n    return JSON.parse(orders);\r\n  };\r\n\r\n  const pushOrder = (order) => {\r\n    let generalOrders = getOrders();\r\n    generalOrders[taqueroType].push(order);\r\n    setOrdersFunction(generalOrders);\r\n    localStorage.setItem(\"orders\", JSON.stringify(generalOrders));\r\n  };\r\n\r\n  const setOrders = (orders) => {\r\n    let generalOrders = getOrders();\r\n    generalOrders[taqueroType] = orders;\r\n    setOrdersFunction(generalOrders);\r\n    localStorage.setItem(\"orders\", JSON.stringify(generalOrders));\r\n  };\r\n\r\n  return { getAllOrders: getOrders, setOrders, pushOrder };\r\n};\r\n\r\nexport default Handler;\r\n","// Handlers\r\nimport OrdersHandler from \"../config/ordersStateHandler\";\r\n\r\nconst Handler = (taqueros, taqueroTypes, logsHandler, setOrdersFunction) => {\r\n  const timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\n  const getValidMeatTipesForTaqueros = (taqueroTypes) => {\r\n    let res = [];\r\n    for (let i = 0; i < taqueroTypes.length; i++) {\r\n      const type = taqueroTypes[i];\r\n      for (let j = 0; j < type.canWorkOn.length; j++) {\r\n        const meatType = type.canWorkOn[j];\r\n        if (!res.includes(meatType)) res.push(meatType);\r\n      }\r\n    }\r\n    return res;\r\n  };\r\n\r\n  const validMeatTypes = getValidMeatTipesForTaqueros(taqueroTypes);\r\n  const validIngredients = [\"cilantro\", \"cebolla\", \"salsa\", \"guacamole\"];\r\n  let handlers = {};\r\n  for (let i = 0; i < taqueroTypes.length; i++) {\r\n    const taqueroType = taqueroTypes[i];\r\n    handlers[taqueroType.name] = OrdersHandler(\r\n      setOrdersFunction,\r\n      taqueroType.name\r\n    );\r\n  }\r\n  handlers.rejected = OrdersHandler(setOrdersFunction, \"rejected\");\r\n  handlers.done = OrdersHandler(setOrdersFunction, \"done\");\r\n\r\n  const allocateOrder = (order) => {\r\n    let min = {\r\n      name: null,\r\n      listSize: taqueros[0].getQueueSize(),\r\n      taqueroIndex: -1,\r\n    };\r\n    for (let i = 0; i < taqueros.length; i++) {\r\n      const taquero = taqueros[i];\r\n      if (!taqueroCanWorkOnOrder(taquero, order)) continue;\r\n      if (taquero.getQueueSize() <= min.listSize) {\r\n        min = {\r\n          name: taquero.name,\r\n          listSize: taquero.getQueueSize(),\r\n          taqueroIndex: i,\r\n        };\r\n      }\r\n    }\r\n    if (min.name !== null) {\r\n      insertTaquero(min.taqueroIndex, [order]);\r\n      return true;\r\n    } else if (orderIsComplete(order)) {\r\n      completeOrder(order);\r\n      return true;\r\n    } else {\r\n      const orders = JSON.parse(localStorage.getItem(\"ordersToReAllocate\"));\r\n      localStorage.setItem(\r\n        \"ordersToReAllocate\",\r\n        JSON.stringify([...orders, order])\r\n      );\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const completeOrder = (order) => {\r\n    order.status = \"done\";\r\n    handlers.done.pushOrder(order);\r\n    logsHandler.log(\r\n      \"Allocation and balancing:\",\r\n      `Order ${order.request_id} is done.`\r\n    );\r\n  };\r\n\r\n  const handleEmptyOrder = (order) => {\r\n    order.status = \"done\";\r\n    handlers.done.pushOrder(order);\r\n    logsHandler.log(\r\n      \"Allocation and balancing:\",\r\n      `Order ${order.request_id} was empty, so its done.`\r\n    );\r\n  };\r\n\r\n  const insertTaquero = (taqueroIndex, orders) => {\r\n    taqueros[taqueroIndex].insertToQueue(orders);\r\n  };\r\n\r\n  const filteredOrder = (order) => {\r\n    const invalid = { invalid: true };\r\n    let tacoCounter = 0;\r\n    const tacoMax = 300;\r\n    try {\r\n      if (typeof order.request_id !== \"number\" || order.request_id < 0) {\r\n        rejectOrder(order, \"invalid id\");\r\n        return invalid;\r\n      }\r\n      if (new Date(order.datetime).toString() === \"Invalid Date\") {\r\n        rejectOrder(order, \"invalid date\");\r\n        return invalid;\r\n      }\r\n      if (order.status !== \"open\") {\r\n        rejectOrder(order, \"invalid status\");\r\n        return invalid;\r\n      }\r\n      let aPartIsInvalid = false;\r\n      if (order.orden.length > 10) return invalid;\r\n      for (let i = 0; i < order.orden.length; i++) {\r\n        const part = order.orden[i];\r\n        tacoCounter += part.quantity;\r\n        if (tacoCounter > tacoMax) {\r\n          rejectOrder(order, \"the order has more than 300 products\");\r\n          return invalid;\r\n        }\r\n        const [orderId, subOrderId] = part.part_id.split(\"-\");\r\n        if (parseInt(orderId) !== order.request_id) {\r\n          rejectPart(null, \"Invalid Id\");\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (\r\n          parseInt(subOrderId) > order.orden.length ||\r\n          parseInt(subOrderId) !== i\r\n        ) {\r\n          rejectPart(null, \"Invalid Id\");\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (part.cuantity > 100) {\r\n          rejectPart(part.part_id, \"has more than 100 products\");\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (!validMeatTypes.includes(part.meat)) {\r\n          rejectPart(\r\n            part.part_id,\r\n            `\"${part.meat}\" is not a valid type of meat`\r\n          );\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (![\"taco\", \"quesadilla\"].includes(part.type)) {\r\n          rejectPart(\r\n            part.part_id,\r\n            `\"${part.type}\" is not a valid type of product`\r\n          );\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (part.status !== \"open\") {\r\n          rejectPart(\r\n            part.part_id,\r\n            `\"${part.status}\" is not a valid initial status`\r\n          );\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        for (let j = 0; j < part.ingredients.length; j++) {\r\n          const ingredient = part.ingredients[j];\r\n          if (!validIngredients.includes(ingredient)) {\r\n            rejectPart(\r\n              part.part_id,\r\n              `\"${ingredient}\" is not a valid ingredient`\r\n            );\r\n            aPartIsInvalid = true;\r\n            delete order.orden[i];\r\n            continue;\r\n          }\r\n        }\r\n        order.orden[i].delay_counter = 0;\r\n        order.orden[i].finished_products = 0;\r\n        order.response = [];\r\n      }\r\n      if (aPartIsInvalid) {\r\n        const temp = order.orden;\r\n        order.orden = [];\r\n        for (let i = 0; i < temp.length; i++) {\r\n          const part = temp[i];\r\n          if (!part) continue;\r\n          order.orden.push(part);\r\n        }\r\n      }\r\n      return order;\r\n    } catch (e) {\r\n      return invalid;\r\n    }\r\n  };\r\n\r\n  const orderIsComplete = (order) => {\r\n    for (let i = 0; i < order.orden.length; i++) {\r\n      const part = order.orden[i];\r\n      if (part.status !== \"done\") return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const rejectOrder = (order, reazon) => {\r\n    logsHandler.log(\r\n      \"Allocation and balancing:\",\r\n      `Order ${\r\n        order.request_id ? order.request_id : \"with unknown id\"\r\n      } rejected due to: ${reazon}`\r\n    );\r\n    handlers.rejected.pushOrder(order);\r\n  };\r\n\r\n  const rejectPart = (partId, reazon) => {\r\n    logsHandler.log(\r\n      \"Allocation and balancing:\",\r\n      `Part ${partId ? partId : \"with unknown id\"} rejected due to: ${reazon}`\r\n    );\r\n  };\r\n\r\n  const start = (input) => {\r\n    watchForOrdersToReallocate();\r\n    for (let i = 0; i < input.length; i++) {\r\n      const order = filteredOrder(input[i]);\r\n      if (order.invalid) continue;\r\n      if (order.orden.length === 0) {\r\n        handleEmptyOrder(order);\r\n        continue;\r\n      }\r\n      allocateOrder(order);\r\n    }\r\n  };\r\n\r\n  const taqueroCanWorkOnOrder = (taquero, order) => {\r\n    for (let i = 0; i < order.orden.length; i++) {\r\n      const part = order.orden[i];\r\n      if (part.status === \"done\") continue;\r\n      if (part.type === \"quesadilla\" && taquero.getQuesadillasInStock() === 0)\r\n        continue;\r\n      if (taquero.canWorkOn.includes(part.meat)) return true;\r\n    }\r\n  };\r\n\r\n  const watchForOrdersToReallocate = async () => {\r\n    while (true) {\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n      const orders = JSON.parse(localStorage.getItem(\"ordersToReAllocate\"));\r\n      let ordersLeft = [];\r\n      for (let i = 0; i < orders.length; i++) {\r\n        const order = orders[i];\r\n        logsHandler.log(\r\n          \"Allocation and balancing:\",\r\n          `Will re-alocate order ${order.request_id}`\r\n        );\r\n        if (!allocateOrder(order)) ordersLeft.push(order);\r\n      }\r\n      localStorage.setItem(\"ordersToReAllocate\", JSON.stringify(ordersLeft));\r\n      await timeout(100);\r\n    }\r\n  };\r\n\r\n  return { start, insertTaquero, allocateOrder };\r\n};\r\nexport default Handler;\r\n","const Handler = (setMetadataFunction, taqueroName) => {\r\n  const timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\n  const consumeFillings = async (fillingNames) => {\r\n    let metadata = getMetadata();\r\n    for (let i = 0; i < fillingNames.length; i++) {\r\n      const fillingName = fillingNames[i];\r\n      metadata[taqueroName].fillings[fillingName]--;\r\n      await timeout(500);\r\n      setMetadata(\"fillings\", metadata[taqueroName].fillings);\r\n    }\r\n  };\r\n\r\n  const getMetadata = () => {\r\n    const metadata = localStorage.getItem(\"metadata\");\r\n    return JSON.parse(metadata);\r\n  };\r\n\r\n  const madeTacos = (quantity) => {\r\n    let metadata = getMetadata();\r\n    // One less order in queue\r\n    metadata[taqueroName].queueLength--;\r\n    // Not working on any\r\n    metadata[taqueroName].workingOn = null;\r\n    // One taco less in rest\r\n    metadata[taqueroName].rest.untilNeeded -= quantity;\r\n    // One taco less in fan\r\n    metadata[taqueroName].fan.untilNeeded -= quantity;\r\n    // Set it\r\n    setMetadataFunction(metadata);\r\n    localStorage.setItem(\"metadata\", JSON.stringify(metadata));\r\n  };\r\n\r\n  const setMetadata = (attribute, value) => {\r\n    let generalMetadata = getMetadata();\r\n    generalMetadata[taqueroName][attribute] = value;\r\n    setMetadataFunction(generalMetadata);\r\n    localStorage.setItem(\"metadata\", JSON.stringify(generalMetadata));\r\n  };\r\n\r\n  const useTortilla = () => {\r\n    let metadata = getMetadata();\r\n    metadata[taqueroName].tortillas--;\r\n    setMetadata(\"tortillas\", metadata[taqueroName].tortillas);\r\n  };\r\n\r\n  return { getMetadata, setMetadata, consumeFillings, useTortilla, madeTacos };\r\n};\r\n\r\nexport default Handler;\r\n","// Handlers\r\nimport OrdersHandler from \"../config/ordersStateHandler\";\r\nimport MetadataHandler from \"../config/metadataHandler\";\r\n\r\n// Actual object\r\nconst Taquero = (\r\n  name,\r\n  canWorkOn,\r\n  ordersSetter,\r\n  setMetadataFunction,\r\n  logsHandler\r\n) => {\r\n  // Handlers and helpers inicialization\r\n  const timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n  const ordersHandler = OrdersHandler(ordersSetter, name);\r\n  const metadataHandler = MetadataHandler(setMetadataFunction, name);\r\n\r\n  // Attributes\r\n  let queue = [];\r\n\r\n  // Functions\r\n  const getOrders = () => {\r\n    return ordersHandler.getAllOrders()[name];\r\n  };\r\n\r\n  const getQuesadillasInStock = () => {\r\n    return metadataHandler.getMetadata()[name].quesadillasInStock;\r\n  };\r\n\r\n  const getPartToParticipate = (parts) => {\r\n    for (let i = 0; i < parts.length; i++) {\r\n      const part = parts[i];\r\n      if (\r\n        canWorkOn.includes(part.meat) &&\r\n        part.status !== \"done\" &&\r\n        (part.type !== \"quesadilla\" || getQuesadillasInStock() >= 1)\r\n      ) {\r\n        return [part, i];\r\n      }\r\n    }\r\n    return [null, null];\r\n  };\r\n\r\n  const giveQuesadilla = () => {\r\n    const newStock = metadataHandler.getMetadata()[name].quesadillasInStock + 1;\r\n    metadataHandler.setMetadata(\"quesadillasInStock\", newStock);\r\n  };\r\n\r\n  const insertToQueue = (newElements) => {\r\n    queue = [...getOrders(), ...newElements];\r\n    ordersHandler.setOrders(queue);\r\n    log(`Inserted ${newElements.length} element(s) succesfully`);\r\n    metadataHandler.setMetadata(\"queueLength\", queue.length);\r\n    return queue;\r\n  };\r\n\r\n  const log = (message) => {\r\n    logsHandler.log(`Taquero de ${name}:`, message);\r\n  };\r\n\r\n  const putFillings = async (part) => {\r\n    await metadataHandler.consumeFillings(part.ingredients);\r\n  };\r\n\r\n  const reAllocateOrder = async (order) => {\r\n    const orders = JSON.parse(localStorage.getItem(\"ordersToReAllocate\"));\r\n    localStorage.setItem(\r\n      \"ordersToReAllocate\",\r\n      JSON.stringify([...orders, order])\r\n    );\r\n  };\r\n\r\n  const rest1Second = async () => {\r\n    await timeout(1000);\r\n    let meta = metadataHandler.getMetadata()[name];\r\n    meta.rest.timeRested++;\r\n    metadataHandler.setMetadata(\"rest\", meta.rest);\r\n  };\r\n\r\n  const startWorking = async () => {\r\n    while (true) {\r\n      if (getOrders().length === 0) await rest1Second();\r\n      else await workOnNextOrder();\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n    }\r\n  };\r\n\r\n  const workOnNextOrder = async () => {\r\n    // Get orders\r\n    queue = getOrders();\r\n    // Make the first one's corresponding parts\r\n    const order = queue[0];\r\n    // Get a part to participate in\r\n    let [part, partIndex] = getPartToParticipate(order.orden);\r\n    if (\r\n      part === null ||\r\n      (part.type === \"quesadilla\" && getQuesadillasInStock() === 0)\r\n    ) {\r\n      reAllocateOrder(queue.shift());\r\n      await rest1Second();\r\n      return;\r\n    }\r\n    const start = Date.now();\r\n    // Start working on it\r\n    part.status = \"working\";\r\n    metadataHandler.setMetadata(\"workingOn\", part.part_id);\r\n    // Make the tacos\r\n    for (let i = 0; part.quantity > part.finished_products; i++) {\r\n      // If quesdilla, use 1\r\n      if (part.type === \"quesadilla\") {\r\n        if (getQuesadillasInStock() > 0) {\r\n          const newStock =\r\n            metadataHandler.getMetadata()[name].quesadillasInStock - 1;\r\n          metadataHandler.setMetadata(\"quesadillasInStock\", newStock);\r\n        } else {\r\n          part.status = \"open\";\r\n          break;\r\n        }\r\n      }\r\n      // Taco time\r\n      metadataHandler.useTortilla();\r\n      await timeout(1000);\r\n      // Put fllings\r\n      await putFillings(part);\r\n      // Sum\r\n      part.finished_products += 1;\r\n      if (part.quantity === part.finished_products) part.status = \"done\";\r\n    }\r\n    part.status = part.status === \"done\" ? part.status : \"open\";\r\n    // Set it\r\n    queue[0].orden[partIndex] = part;\r\n    queue[0].response.push({\r\n      who: `Taquero de ${name}`,\r\n      when: new Date().toISOString(),\r\n      what: `Made ${part.finished_products} ${part.meat} ${part.type} (part ${part.part_id})`,\r\n      time: Date.now() - start,\r\n    });\r\n    reAllocateOrder(queue.shift());\r\n    ordersHandler.setOrders(queue);\r\n    metadataHandler.madeTacos(part.quantity);\r\n    // Log it\r\n    log(`Finished part \"${part.part_id}\" ${queue.length} left`);\r\n    // Return it\r\n    return queue.length;\r\n  };\r\n\r\n  // Actual object\r\n  return {\r\n    name,\r\n    insertToQueue,\r\n    getQueueSize: () => getOrders().length,\r\n    workOnNextOrder,\r\n    getOrders,\r\n    startWorking,\r\n    canWorkOn,\r\n    getQuesadillasInStock,\r\n    giveQuesadilla,\r\n  };\r\n};\r\n\r\nexport default Taquero;\r\n","// Handlers\r\nimport MetadataHandler from \"../config/metadataHandler\";\r\n\r\nconst Quesadillero = (setMetadataFunction, taqueros) => {\r\n  // Handlers and helpers inicialization\r\n  const timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n  const metadataHandler = MetadataHandler(setMetadataFunction, \"quesadillero\");\r\n\r\n  const saveQuesadilla = () => {\r\n    metadataHandler.setMetadata(\r\n      \"quesadillasReady\",\r\n      metadataHandler.getMetadata()[\"quesadillero\"].quesadillasReady + 1\r\n    );\r\n  };\r\n\r\n  const start = async () => {\r\n    while (true) {\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n      // Use Tortillas\r\n      metadataHandler.setMetadata(\r\n        \"tortillas\",\r\n        metadataHandler.getMetadata()[\"quesadillero\"].tortillas - 1\r\n      );\r\n      await timeout(20000); // Fucking long time to make a tortilla with cheese\r\n      let min = {\r\n        index: null,\r\n        quantity: 6,\r\n      };\r\n      for (let i = 0; i < taqueros.length; i++) {\r\n        const taquero = taqueros[i];\r\n        if (\r\n          taquero.getQuesadillasInStock() < min.quantity &&\r\n          taquero.getQuesadillasInStock() < 5\r\n        )\r\n          min = { index: i, quantity: taquero.getQuesadillasInStock() };\r\n      }\r\n      if (min.index !== null) {\r\n        taqueros[min.index].giveQuesadilla();\r\n      } else saveQuesadilla();\r\n    }\r\n  };\r\n\r\n  return { start };\r\n};\r\n\r\nexport default Quesadillero;\r\n","// React imports\nimport React, { useState, useEffect } from \"react\";\n\n// Styles\nimport \"./App.css\";\n\n// Objects\nimport LogsHandler from \"./config/logsHandler\";\nimport AllocationHandler from \"./config/allocationAndBalancing\";\nimport Taquero from \"./objects/taquero\";\nimport Quesadillero from \"./objects/quesadillero\";\n\n// Sample input\nimport sampleInput from \"./samples/miniOrdenes.json\";\n\nconst App = () => {\n  // Config constants\n  const [isRunning, setIsRunning] = useState(false);\n  const [firstLoad, setFirstLoad] = useState(true);\n  const config = {\n    tacosNeededToRest: 1000,\n    fillingsTop: {\n      tortillas: 50,\n      cilantro: 200,\n      cebolla: 200,\n      salsa: 150,\n      guacamole: 100,\n    },\n  };\n  // Frontend-exclusive\n  const [chrono, setChrono] = useState(0);\n  const [logs, setLogs] = useState([]);\n  const logsHandler = LogsHandler(setLogs);\n  // Taqueros/orders-related\n  const taqueroTypes = [\n    { name: \"tripa y cabeza\", canWorkOn: [\"tripa\", \"cabeza\"] },\n    { name: \"asada y suadero (1)\", canWorkOn: [\"asada\", \"suadero\"] },\n    { name: \"asada y suadero (2)\", canWorkOn: [\"asada\", \"suadero\"] },\n    { name: \"adobada\", canWorkOn: [\"adobada\"] },\n  ];\n  const getDefaultQueuesFor = (types) => {\n    let orders = {};\n    for (let i = 0; i < types.length; i++) {\n      const type = types[i];\n      orders[type.name] = [];\n    }\n    orders.rejected = [];\n    orders.done = [];\n    return orders;\n  };\n  const defaultQueues = getDefaultQueuesFor(taqueroTypes);\n  const [orders, setOrders] = useState(defaultQueues);\n  const defaultTaqueroMetadata = {\n    workingOn: null,\n    queueLength: 0,\n    fan: {\n      active: true,\n      untilNeeded: 0,\n    },\n    rest: {\n      untilNeeded: 1000,\n      timeRested: 0,\n    },\n    tortillas: config.fillingsTop.tortillas,\n    quesadillasInStock: 0,\n    fillings: {\n      salsa: config.fillingsTop.salsa,\n      guacamole: config.fillingsTop.guacamole,\n      cilantro: config.fillingsTop.cilantro,\n      cebolla: config.fillingsTop.cebolla,\n    },\n  };\n  const defaultQuesadilleroMetadata = {\n    fan: {\n      active: true,\n      untilNeeded: 0,\n    },\n    rest: {\n      untilNeeded: 1000,\n      timeRested: 0,\n    },\n    tortillas: 50,\n    quesadillasReady: 0,\n  };\n  const getDefaultMetadataFor = (types) => {\n    let metadata = {};\n    for (let i = 0; i < types.length; i++) {\n      const type = types[i];\n      metadata[type.name] = defaultTaqueroMetadata;\n    }\n    metadata[\"quesadillero\"] = defaultQuesadilleroMetadata;\n    return metadata;\n  };\n  const [metadata, setMetadata] = useState(getDefaultMetadataFor(taqueroTypes));\n  const taqueros = taqueroTypes.map((type) =>\n    Taquero(type.name, type.canWorkOn, setOrders, setMetadata, logsHandler)\n  );\n  const quesadillero = Quesadillero(setMetadata, taqueros);\n  const allocationBalanceHandler = AllocationHandler(\n    taqueros,\n    taqueroTypes,\n    logsHandler,\n    setOrders\n  );\n\n  // Functions\n  const cleanLogs = () => {\n    localStorage.setItem(\"logs\", JSON.stringify([]));\n    setLogs([]);\n  };\n\n  const formatTimeForLogs = (timestamp) => {\n    const date = new Date(timestamp);\n    return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()} (${date.getMilliseconds()}ms)`;\n  };\n\n  const ordersAreFinished = () => {\n    for (let i = 0; i < taqueros.length; i++) {\n      if (taqueros[i].getQueueSize() > 0) return false;\n    }\n    if (JSON.parse(localStorage.getItem(\"ordersToReAllocate\")).length > 0)\n      return false;\n    return true;\n  };\n\n  const restartMetadata = () => {\n    setMetadata(getDefaultMetadataFor(taqueroTypes));\n    localStorage.setItem(\n      \"metadata\",\n      JSON.stringify(getDefaultMetadataFor(taqueroTypes))\n    );\n  };\n\n  const setup = () => {\n    // Set initial local storage values\n    localStorage.setItem(\"orders\", JSON.stringify(defaultQueues));\n    localStorage.setItem(\"logs\", JSON.stringify([]));\n    localStorage.setItem(\n      \"metadata\",\n      JSON.stringify(getDefaultMetadataFor(taqueroTypes))\n    );\n    localStorage.setItem(\"ordersToReAllocate\", JSON.stringify([]));\n  };\n\n  const startRUDA = async () => {\n    if (isRunning) return;\n    setIsRunning(true);\n    cleanLogs();\n    restartMetadata();\n    localStorage.setItem(\"RUDAIsWorking\", JSON.stringify(true));\n\n    // Start Allocation and balance handler\n    allocationBalanceHandler.start(sampleInput);\n\n    // Start every taquero\n    for (let i = 0; i < taqueros.length; i++) {\n      taqueros[i].startWorking();\n    }\n    // Start quesadillero\n    quesadillero.start();\n    // Start loop until everything is done\n    let counter = 0;\n    while (true) {\n      const now = Date.now();\n      await timeout(100);\n      if (ordersAreFinished()) {\n        localStorage.setItem(\"RUDAIsWorking\", JSON.stringify(false));\n        break;\n      }\n      counter += Date.now() - now;\n      setChrono((counter / 1000).toFixed(1));\n    }\n    setIsRunning(false);\n  };\n\n  const timeout = (ms) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  };\n\n  // Logic\n  // eslint-disable-next-line\n  useEffect(() => {\n    if (firstLoad) {\n      setFirstLoad(false);\n      setup();\n    }\n  });\n\n  // Render\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <img\n          src=\"https://raw.githubusercontent.com/ulisesaviles/os-tacoshop-ruda/main/RUDA.png\"\n          className=\"logo\"\n          alt=\"logo\"\n        />\n        {!isRunning ? (\n          <button onClick={startRUDA} className=\"startBtn\">\n            Start RUDA\n          </button>\n        ) : (\n          <div className=\"running\">Running RUDA...</div>\n        )}\n        <p className=\"chrono\">({chrono}s)</p>\n      </div>\n      <div className=\"contentContainer\">\n        <div className=\"contentLeftContainer\">\n          <div className=\"taquerosContainer\">\n            {/* Taqueros */}\n            {taqueroTypes.map((taqueroType) => {\n              const index = taqueroTypes.indexOf(taqueroType);\n              return (\n                <div key={index} className=\"taqueroContainer\">\n                  <h4 className=\"taqueroName\">Taquero de {taqueroType.name}</h4>\n                  <div className=\"taqueroMetadataContainer\">\n                    <h3 className=\"metadata\">Metadata</h3>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">\n                        Orders in queue:\n                      </h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].queueLength}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Working on:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].workingOn === null\n                          ? \"null\"\n                          : metadata[taqueroType.name].workingOn}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Fan active:</h6>\n                      <p className=\"actualMetadata\">\n                        {JSON.stringify(metadata[taqueroType.name].fan.active)}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Chalán:</h6>\n                      <p className=\"actualMetadata\">X</p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Time rested:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].rest.timeRested}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">\n                        Tacos untill rest:\n                      </h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].rest.untilNeeded}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">\n                        Quesadillas in stock:\n                      </h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].quesadillasInStock}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Tortillas</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].tortillas}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Cilantro:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].fillings.cilantro}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Cebolla:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].fillings.cebolla}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Salsa:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].fillings.salsa}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Guacamole:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].fillings.guacamole}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n            {/* Quesadillero */}\n            <div className=\"taqueroContainer\">\n              <h4 className=\"taqueroName\">Quesadillero</h4>\n              <div className=\"taqueroMetadataContainer\">\n                <h3 className=\"metadata\">Metadata</h3>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">\n                    Ready quesadillas:\n                  </h6>\n                  <p className=\"actualMetadata\">\n                    {metadata.quesadillero.quesadillasReady}\n                  </p>\n                </div>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">Fan active:</h6>\n                  <p className=\"actualMetadata\">\n                    {JSON.stringify(metadata.quesadillero.fan.active)}\n                  </p>\n                </div>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">Time rested:</h6>\n                  <p className=\"actualMetadata\">\n                    {metadata.quesadillero.rest.timeRested}\n                  </p>\n                </div>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">\n                    Quesadillas untill rest:\n                  </h6>\n                  <p className=\"actualMetadata\">\n                    {metadata.quesadillero.rest.untilNeeded}\n                  </p>\n                </div>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">Tortillas</h6>\n                  <p className=\"actualMetadata\">\n                    {metadata.quesadillero.tortillas}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div>\n            {Object.keys(orders).map((key) => (\n              <div key={key}>\n                {key}: {JSON.stringify(orders[key])}\n              </div>\n            ))}\n          </div>\n        </div>\n        <div className=\"logsContainer\">\n          <h2 className=\"logsTitle\">Logs:</h2>\n          <p className=\"logsSubtitle\">(De más nuevo a más viejo)</p>\n          <div className=\"logsContentContainer\">\n            {logs.map((log) => (\n              <div className=\"logContainer\">\n                <div className=\"logHeaderContainer\">\n                  <h5 className=\"logTitle\">{log.title}</h5>\n                  <p className=\"logTime\">{formatTimeForLogs(log.time)}</p>\n                </div>\n                {log.message}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n// TO-DO'S\n// FRI\n//   Create balanceo (when taquero needs to rest or Quesadillas)\n//   Quesadillero should give quesadillas to people who need it\n//   Scheduler\n// SAT\n//   Chalanes\n// SUN\n//   Doc and extras\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}