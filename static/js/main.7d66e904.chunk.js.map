{"version":3,"sources":["config/ordersStateHandler.js","config/metadataHandler.js","objects/taquero.js","objects/quesadillero.js","config/logsHandler.js","config/allocationAndBalancing.js","components/table.js","App.js","index.js"],"names":["Handler","setOrdersFunction","taqueroType","defaultQueues","getOrders","orders","localStorage","getItem","JSON","parse","getAllOrders","setOrders","generalOrders","setItem","stringify","pushOrder","order","push","restartRUDA","setMetadataFunction","taqueroName","timeout","ms","Promise","resolve","setTimeout","consumeFillings","fillingNames","a","metadata","getMetadata","i","length","fillingName","fillings","setMetadata","attribute","value","generalMetadata","useTortilla","tortillas","madeTacos","quantity","queueLength","workingOn","rest","untilNeeded","fan","Taquero","name","canWorkOn","ordersSetter","logsHandler","ordersHandler","OrdersHandler","metadataHandler","MetadataHandler","queue","getQuesadillasInStock","quesadillasInStock","getPartToParticipate","parts","part","includes","meat","status","type","log","message","putFillings","ingredients","reAllocateOrder","rest1Second","meta","timeRested","startWorking","workOnNextOrder","orden","partIndex","shift","start","Date","now","part_id","finished_products","newStock","response","who","when","toISOString","what","time","insertToQueue","newElements","getQueueSize","giveQuesadilla","restart","Quesadillero","taqueros","min","index","taquero","quesadillasReady","setLogsFunction","title","logs","unshift","taqueroTypes","validMeatTypes","res","j","meatType","getValidMeatTipesForTaqueros","validIngredients","handlers","rejected","done","allocateOrder","listSize","taqueroIndex","taqueroCanWorkOnOrder","insertTaquero","orderIsComplete","completeOrder","request_id","handleEmptyOrder","filteredOrder","invalid","tacoCounter","rejectOrder","datetime","toString","aPartIsInvalid","split","orderId","subOrderId","parseInt","rejectPart","cuantity","ingredient","delay_counter","temp","e","reazon","partId","watchForOrdersToReallocate","ordersLeft","input","Table","props","data","headers","Object","keys","className","map","header","row","indexOf","App","useState","isRunning","setIsRunning","firstLoad","setFirstLoad","config","cilantro","cebolla","salsa","guacamole","chrono","setChrono","setLogs","LogsHandler","types","getDefaultQueuesFor","defaultTaqueroMetadata","active","defaultQuesadilleroMetadata","getDefaultMetadataFor","quesadillero","allocationBalanceHandler","AllocationHandler","capitalize","str","charAt","toUpperCase","substring","formatOrderForTable","order_","console","formatTimeForLogs","finishedParts","productQuantity","stepsDone","undefined","formatOrdersForTable","timestamp","date","getHours","getMinutes","getSeconds","getMilliseconds","ordersAreFinished","startRUDA","sampleInput","counter","toFixed","useEffect","src","alt","onClick","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d66e904.chunk.js","sourcesContent":["const Handler = (setOrdersFunction, taqueroType, defaultQueues) => {\r\n  const getOrders = () => {\r\n    const orders = localStorage.getItem(\"orders\");\r\n    return JSON.parse(orders);\r\n  };\r\n\r\n  const pushOrder = (order) => {\r\n    let generalOrders = getOrders();\r\n    generalOrders[taqueroType].push(order);\r\n    setOrdersFunction(generalOrders);\r\n    localStorage.setItem(\"orders\", JSON.stringify(generalOrders));\r\n  };\r\n\r\n  const restartRUDA = () => {\r\n    setOrdersFunction(defaultQueues);\r\n    localStorage.setItem(\"orders\", JSON.stringify(defaultQueues));\r\n  };\r\n\r\n  const setOrders = (orders) => {\r\n    let generalOrders = getOrders();\r\n    generalOrders[taqueroType] = orders;\r\n    setOrdersFunction(generalOrders);\r\n    localStorage.setItem(\"orders\", JSON.stringify(generalOrders));\r\n  };\r\n\r\n  return { getAllOrders: getOrders, setOrders, pushOrder, restartRUDA };\r\n};\r\n\r\nexport default Handler;\r\n","const Handler = (setMetadataFunction, taqueroName) => {\r\n  const timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\n  const consumeFillings = async (fillingNames) => {\r\n    let metadata = getMetadata();\r\n    for (let i = 0; i < fillingNames.length; i++) {\r\n      const fillingName = fillingNames[i];\r\n      metadata[taqueroName].fillings[fillingName]--;\r\n      await timeout(500);\r\n      setMetadata(\"fillings\", metadata[taqueroName].fillings);\r\n    }\r\n  };\r\n\r\n  const getMetadata = () => {\r\n    const metadata = localStorage.getItem(\"metadata\");\r\n    return JSON.parse(metadata);\r\n  };\r\n\r\n  const madeTacos = (quantity) => {\r\n    let metadata = getMetadata();\r\n    // One less order in queue\r\n    metadata[taqueroName].queueLength--;\r\n    // Not working on any\r\n    metadata[taqueroName].workingOn = null;\r\n    // One taco less in rest\r\n    metadata[taqueroName].rest.untilNeeded -= quantity;\r\n    // One taco less in fan\r\n    metadata[taqueroName].fan.untilNeeded -= quantity;\r\n    // Set it\r\n    setMetadataFunction(metadata);\r\n    localStorage.setItem(\"metadata\", JSON.stringify(metadata));\r\n  };\r\n\r\n  const setMetadata = (attribute, value) => {\r\n    let generalMetadata = getMetadata();\r\n    generalMetadata[taqueroName][attribute] = value;\r\n    setMetadataFunction(generalMetadata);\r\n    localStorage.setItem(\"metadata\", JSON.stringify(generalMetadata));\r\n  };\r\n\r\n  const useTortilla = () => {\r\n    let metadata = getMetadata();\r\n    metadata[taqueroName].tortillas--;\r\n    setMetadata(\"tortillas\", metadata[taqueroName].tortillas);\r\n  };\r\n\r\n  return { getMetadata, setMetadata, consumeFillings, useTortilla, madeTacos };\r\n};\r\n\r\nexport default Handler;\r\n","// Handlers\r\nimport OrdersHandler from \"../config/ordersStateHandler\";\r\nimport MetadataHandler from \"../config/metadataHandler\";\r\n\r\n// Actual object\r\nconst Taquero = (\r\n  name,\r\n  canWorkOn,\r\n  ordersSetter,\r\n  setMetadataFunction,\r\n  logsHandler\r\n) => {\r\n  // Handlers and helpers inicialization\r\n  const timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n  const ordersHandler = OrdersHandler(ordersSetter, name);\r\n  const metadataHandler = MetadataHandler(setMetadataFunction, name);\r\n\r\n  // Attributes\r\n  let queue = [];\r\n\r\n  // Functions\r\n  const getOrders = () => {\r\n    return ordersHandler.getAllOrders()[name];\r\n  };\r\n\r\n  const getQuesadillasInStock = () => {\r\n    return metadataHandler.getMetadata()[name].quesadillasInStock;\r\n  };\r\n\r\n  const getPartToParticipate = (parts) => {\r\n    for (let i = 0; i < parts.length; i++) {\r\n      const part = parts[i];\r\n      if (\r\n        canWorkOn.includes(part.meat) &&\r\n        part.status !== \"done\" &&\r\n        (part.type !== \"quesadilla\" || getQuesadillasInStock() >= 1)\r\n      ) {\r\n        return [part, i];\r\n      }\r\n    }\r\n    return [null, null];\r\n  };\r\n\r\n  const giveQuesadilla = () => {\r\n    const newStock = metadataHandler.getMetadata()[name].quesadillasInStock + 1;\r\n    metadataHandler.setMetadata(\"quesadillasInStock\", newStock);\r\n  };\r\n\r\n  const insertToQueue = (newElements) => {\r\n    queue = [...getOrders(), ...newElements];\r\n    ordersHandler.setOrders(queue);\r\n    log(`Inserted ${newElements.length} element(s) succesfully`);\r\n    metadataHandler.setMetadata(\"queueLength\", queue.length);\r\n    return queue;\r\n  };\r\n\r\n  const log = (message) => {\r\n    logsHandler.log(`Taquero de ${name}:`, message);\r\n  };\r\n\r\n  const putFillings = async (part) => {\r\n    await metadataHandler.consumeFillings(part.ingredients);\r\n  };\r\n\r\n  const reAllocateOrder = async (order) => {\r\n    const orders = JSON.parse(localStorage.getItem(\"ordersToReAllocate\"));\r\n    localStorage.setItem(\r\n      \"ordersToReAllocate\",\r\n      JSON.stringify([...orders, order])\r\n    );\r\n  };\r\n\r\n  const restart = () => {\r\n    ordersHandler.setOrders([]);\r\n  };\r\n\r\n  const rest1Second = async () => {\r\n    await timeout(1000);\r\n    let meta = metadataHandler.getMetadata()[name];\r\n    meta.rest.timeRested++;\r\n    metadataHandler.setMetadata(\"rest\", meta.rest);\r\n  };\r\n\r\n  const startWorking = async () => {\r\n    while (true) {\r\n      if (getOrders().length === 0) await rest1Second();\r\n      else await workOnNextOrder();\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n    }\r\n  };\r\n\r\n  const workOnNextOrder = async () => {\r\n    // Get orders\r\n    queue = getOrders();\r\n    // Make the first one's corresponding parts\r\n    const order = queue[0];\r\n    // Get a part to participate in\r\n    let [part, partIndex] = getPartToParticipate(order.orden);\r\n    if (\r\n      part === null ||\r\n      (part.type === \"quesadilla\" && getQuesadillasInStock() === 0)\r\n    ) {\r\n      reAllocateOrder(queue.shift());\r\n      await rest1Second();\r\n      return;\r\n    }\r\n    const start = Date.now();\r\n    // Start working on it\r\n    part.status = \"working\";\r\n    metadataHandler.setMetadata(\"workingOn\", part.part_id);\r\n    // Make the tacos\r\n    for (let i = 0; part.quantity > part.finished_products; i++) {\r\n      // If quesdilla, use 1\r\n      if (part.type === \"quesadilla\") {\r\n        if (getQuesadillasInStock() > 0) {\r\n          const newStock =\r\n            metadataHandler.getMetadata()[name].quesadillasInStock - 1;\r\n          metadataHandler.setMetadata(\"quesadillasInStock\", newStock);\r\n        } else {\r\n          part.status = \"open\";\r\n          break;\r\n        }\r\n      }\r\n      // Taco time\r\n      metadataHandler.useTortilla();\r\n      await timeout(1000);\r\n      // Put fllings\r\n      await putFillings(part);\r\n      // Sum\r\n      part.finished_products += 1;\r\n      if (part.quantity === part.finished_products) part.status = \"done\";\r\n    }\r\n    part.status = part.status === \"done\" ? part.status : \"open\";\r\n    // Set it\r\n    queue[0].orden[partIndex] = part;\r\n    queue[0].response.push({\r\n      who: `Taquero de ${name}`,\r\n      when: new Date().toISOString(),\r\n      what: `Made ${part.finished_products} ${part.meat} ${part.type} (part ${part.part_id})`,\r\n      time: Date.now() - start,\r\n    });\r\n    reAllocateOrder(queue.shift());\r\n    ordersHandler.setOrders(queue);\r\n    metadataHandler.madeTacos(part.quantity);\r\n    // Log it\r\n    log(`Finished part \"${part.part_id}\" ${queue.length} left`);\r\n    // Return it\r\n    return queue.length;\r\n  };\r\n\r\n  // Actual object\r\n  return {\r\n    name,\r\n    insertToQueue,\r\n    getQueueSize: () => getOrders().length,\r\n    workOnNextOrder,\r\n    getOrders,\r\n    startWorking,\r\n    canWorkOn,\r\n    getQuesadillasInStock,\r\n    giveQuesadilla,\r\n    restart,\r\n  };\r\n};\r\n\r\nexport default Taquero;\r\n","// Handlers\r\nimport MetadataHandler from \"../config/metadataHandler\";\r\n\r\nconst Quesadillero = (setMetadataFunction, taqueros) => {\r\n  // Handlers and helpers inicialization\r\n  const timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n  const metadataHandler = MetadataHandler(setMetadataFunction, \"quesadillero\");\r\n\r\n  const saveQuesadilla = () => {\r\n    metadataHandler.setMetadata(\r\n      \"quesadillasReady\",\r\n      metadataHandler.getMetadata()[\"quesadillero\"].quesadillasReady + 1\r\n    );\r\n  };\r\n\r\n  const start = async () => {\r\n    while (true) {\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n      // Use Tortillas\r\n      metadataHandler.setMetadata(\r\n        \"tortillas\",\r\n        metadataHandler.getMetadata()[\"quesadillero\"].tortillas - 1\r\n      );\r\n      await timeout(5000); // Fucking long time to make a tortilla with cheese\r\n      let min = {\r\n        index: null,\r\n        quantity: 6,\r\n      };\r\n      for (let i = 0; i < taqueros.length; i++) {\r\n        const taquero = taqueros[i];\r\n        if (\r\n          taquero.getQuesadillasInStock() < min.quantity &&\r\n          taquero.getQuesadillasInStock() < 5\r\n        )\r\n          min = { index: i, quantity: taquero.getQuesadillasInStock() };\r\n      }\r\n      if (min.index !== null) {\r\n        taqueros[min.index].giveQuesadilla();\r\n      } else saveQuesadilla();\r\n    }\r\n  };\r\n\r\n  return { start };\r\n};\r\n\r\nexport default Quesadillero;\r\n","const Handler = (setLogsFunction) => {\r\n  const log = (title, message) => {\r\n    let logs = JSON.parse(localStorage.getItem(\"logs\"));\r\n    logs.unshift({ title, message, time: Date.now() });\r\n    setLogsFunction(logs);\r\n    localStorage.setItem(\"logs\", JSON.stringify(logs));\r\n  };\r\n\r\n  return { log };\r\n};\r\n\r\nexport default Handler;\r\n","// Handlers\r\nimport OrdersHandler from \"../config/ordersStateHandler\";\r\n\r\nconst Handler = (taqueros, taqueroTypes, logsHandler, setOrdersFunction) => {\r\n  const timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\n  const getValidMeatTipesForTaqueros = (taqueroTypes) => {\r\n    let res = [];\r\n    for (let i = 0; i < taqueroTypes.length; i++) {\r\n      const type = taqueroTypes[i];\r\n      for (let j = 0; j < type.canWorkOn.length; j++) {\r\n        const meatType = type.canWorkOn[j];\r\n        if (!res.includes(meatType)) res.push(meatType);\r\n      }\r\n    }\r\n    return res;\r\n  };\r\n\r\n  const validMeatTypes = getValidMeatTipesForTaqueros(taqueroTypes);\r\n  const validIngredients = [\"cilantro\", \"cebolla\", \"salsa\", \"guacamole\"];\r\n  let handlers = {};\r\n  for (let i = 0; i < taqueroTypes.length; i++) {\r\n    const taqueroType = taqueroTypes[i];\r\n    handlers[taqueroType.name] = OrdersHandler(\r\n      setOrdersFunction,\r\n      taqueroType.name\r\n    );\r\n  }\r\n  handlers.rejected = OrdersHandler(setOrdersFunction, \"rejected\");\r\n  handlers.done = OrdersHandler(setOrdersFunction, \"done\");\r\n\r\n  const allocateOrder = (order) => {\r\n    let min = {\r\n      name: null,\r\n      listSize: taqueros[0].getQueueSize(),\r\n      taqueroIndex: -1,\r\n    };\r\n    for (let i = 0; i < taqueros.length; i++) {\r\n      const taquero = taqueros[i];\r\n      if (!taqueroCanWorkOnOrder(taquero, order)) continue;\r\n      if (taquero.getQueueSize() <= min.listSize) {\r\n        min = {\r\n          name: taquero.name,\r\n          listSize: taquero.getQueueSize(),\r\n          taqueroIndex: i,\r\n        };\r\n      }\r\n    }\r\n    if (min.name !== null) {\r\n      insertTaquero(min.taqueroIndex, [order]);\r\n      return true;\r\n    } else if (orderIsComplete(order)) {\r\n      completeOrder({ ...order });\r\n      return true;\r\n    } else {\r\n      const orders = JSON.parse(localStorage.getItem(\"ordersToReAllocate\"));\r\n      localStorage.setItem(\r\n        \"ordersToReAllocate\",\r\n        JSON.stringify([...orders, order])\r\n      );\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const completeOrder = (order) => {\r\n    order.status = \"done\";\r\n    handlers.done.pushOrder(order);\r\n    logsHandler.log(\r\n      \"Allocation and balancing:\",\r\n      `Order ${order.request_id} is done.`\r\n    );\r\n  };\r\n\r\n  const handleEmptyOrder = (order) => {\r\n    order.status = \"done\";\r\n    handlers.done.pushOrder(order);\r\n    logsHandler.log(\r\n      \"Allocation and balancing:\",\r\n      `Order ${order.request_id} was empty, so its done.`\r\n    );\r\n  };\r\n\r\n  const insertTaquero = (taqueroIndex, orders) => {\r\n    taqueros[taqueroIndex].insertToQueue(orders);\r\n  };\r\n\r\n  const filteredOrder = (order) => {\r\n    const invalid = { invalid: true };\r\n    let tacoCounter = 0;\r\n    const tacoMax = 300;\r\n    try {\r\n      if (typeof order.request_id !== \"number\" || order.request_id < 0) {\r\n        rejectOrder(order, \"invalid id\");\r\n        return invalid;\r\n      }\r\n      if (new Date(order.datetime).toString() === \"Invalid Date\") {\r\n        rejectOrder(order, \"invalid date\");\r\n        return invalid;\r\n      }\r\n      if (order.status !== \"open\") {\r\n        rejectOrder(order, `invalid status '${order.status}'`);\r\n        return invalid;\r\n      }\r\n      let aPartIsInvalid = false;\r\n      if (order.orden.length > 10) return invalid;\r\n      for (let i = 0; i < order.orden.length; i++) {\r\n        const part = order.orden[i];\r\n        tacoCounter += part.quantity;\r\n        if (tacoCounter > tacoMax) {\r\n          rejectOrder(order, \"the order has more than 300 products\");\r\n          return invalid;\r\n        }\r\n        const [orderId, subOrderId] = part.part_id.split(\"-\");\r\n        if (parseInt(orderId) !== order.request_id) {\r\n          rejectPart(null, \"Invalid Id\");\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (\r\n          parseInt(subOrderId) > order.orden.length ||\r\n          parseInt(subOrderId) !== i\r\n        ) {\r\n          rejectPart(null, \"Invalid Id\");\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (part.cuantity > 100) {\r\n          rejectPart(part.part_id, \"has more than 100 products\");\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (!validMeatTypes.includes(part.meat)) {\r\n          rejectPart(\r\n            part.part_id,\r\n            `\"${part.meat}\" is not a valid type of meat`\r\n          );\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (![\"taco\", \"quesadilla\"].includes(part.type)) {\r\n          rejectPart(\r\n            part.part_id,\r\n            `\"${part.type}\" is not a valid type of product`\r\n          );\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (part.status !== \"open\") {\r\n          rejectPart(\r\n            part.part_id,\r\n            `\"${part.status}\" is not a valid initial status`\r\n          );\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        for (let j = 0; j < part.ingredients.length; j++) {\r\n          const ingredient = part.ingredients[j];\r\n          if (!validIngredients.includes(ingredient)) {\r\n            rejectPart(\r\n              part.part_id,\r\n              `\"${ingredient}\" is not a valid ingredient`\r\n            );\r\n            aPartIsInvalid = true;\r\n            delete order.orden[i];\r\n            continue;\r\n          }\r\n        }\r\n        order.orden[i].delay_counter = 0;\r\n        order.orden[i].finished_products = 0;\r\n        order.response = [];\r\n      }\r\n      if (aPartIsInvalid) {\r\n        const temp = order.orden;\r\n        order.orden = [];\r\n        for (let i = 0; i < temp.length; i++) {\r\n          const part = temp[i];\r\n          if (!part) continue;\r\n          order.orden.push(part);\r\n        }\r\n      }\r\n      return order;\r\n    } catch (e) {\r\n      return invalid;\r\n    }\r\n  };\r\n\r\n  const orderIsComplete = (order) => {\r\n    for (let i = 0; i < order.orden.length; i++) {\r\n      const part = order.orden[i];\r\n      if (part.status !== \"done\") return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const rejectOrder = (order, reazon) => {\r\n    logsHandler.log(\r\n      \"Allocation and balancing:\",\r\n      `Order ${\r\n        order.request_id ? order.request_id : \"with unknown id\"\r\n      } rejected due to: ${reazon}`\r\n    );\r\n    order.status = \"rejected\";\r\n    handlers.rejected.pushOrder(order);\r\n  };\r\n\r\n  const rejectPart = (partId, reazon) => {\r\n    logsHandler.log(\r\n      \"Allocation and balancing:\",\r\n      `Part ${partId ? partId : \"with unknown id\"} rejected due to: ${reazon}`\r\n    );\r\n  };\r\n\r\n  const start = (input) => {\r\n    watchForOrdersToReallocate();\r\n    for (let i = 0; i < input.length; i++) {\r\n      const order = filteredOrder(input[i]);\r\n      if (order.invalid) continue;\r\n      if (order.orden.length === 0) {\r\n        handleEmptyOrder({ ...order });\r\n        continue;\r\n      }\r\n      allocateOrder(order);\r\n    }\r\n  };\r\n\r\n  const taqueroCanWorkOnOrder = (taquero, order) => {\r\n    for (let i = 0; i < order.orden.length; i++) {\r\n      const part = order.orden[i];\r\n      if (part.status === \"done\") continue;\r\n      if (part.type === \"quesadilla\" && taquero.getQuesadillasInStock() === 0)\r\n        continue;\r\n      if (taquero.canWorkOn.includes(part.meat)) return true;\r\n    }\r\n  };\r\n\r\n  const watchForOrdersToReallocate = async () => {\r\n    while (true) {\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n      const orders = JSON.parse(localStorage.getItem(\"ordersToReAllocate\"));\r\n      let ordersLeft = [];\r\n      for (let i = 0; i < orders.length; i++) {\r\n        const order = orders[i];\r\n        logsHandler.log(\r\n          \"Allocation and balancing:\",\r\n          `Will re-alocate order ${order.request_id}`\r\n        );\r\n        if (!allocateOrder(order)) ordersLeft.push(order);\r\n      }\r\n      localStorage.setItem(\"ordersToReAllocate\", JSON.stringify(ordersLeft));\r\n      await timeout(100);\r\n    }\r\n  };\r\n\r\n  return { start, insertTaquero, allocateOrder };\r\n};\r\nexport default Handler;\r\n","// Styles\r\nimport \"../App.css\";\r\n\r\nconst Table = (props) => {\r\n  const { data } = props;\r\n  const headers =\r\n    data != null && data.length >= 1 ? Object.keys(data[0]) : null;\r\n\r\n  return headers ? (\r\n    <div className=\"table\">\r\n      <div className=\"tableRow\">\r\n        {headers.map((header) => (\r\n          <div className=\"cell cellHeader\">\r\n            <p className=\"cellText cellTextHeader\">{header}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {data.map((row) => (\r\n        <div className=\"tableRow\">\r\n          {headers.map((header) => (\r\n            <div className={`cell cell${data.indexOf(row) % 2}`}>\r\n              <p className=\"cellText\">{row[header]}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  ) : (\r\n    <p className=\"noOrders\">(No orders)</p>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","// React imports\nimport React, { useState, useEffect } from \"react\";\n\n// Styles\nimport \"./App.css\";\n\n// Objects\nimport Taquero from \"./objects/taquero\";\nimport Quesadillero from \"./objects/quesadillero\";\n\n// Handlers\nimport LogsHandler from \"./config/logsHandler\";\nimport AllocationHandler from \"./config/allocationAndBalancing\";\nimport OrdersHandler from \"./config/ordersStateHandler\";\n\n// Components\nimport Table from \"./components/table\";\n\n// Sample input\nimport sampleInput from \"./samples/miniOrdenes.json\";\n\nconst App = () => {\n  // Config constants\n  const [isRunning, setIsRunning] = useState(false);\n  const [firstLoad, setFirstLoad] = useState(true);\n  const config = {\n    tacosNeededToRest: 1000,\n    fillingsTop: {\n      tortillas: 50,\n      cilantro: 200,\n      cebolla: 200,\n      salsa: 150,\n      guacamole: 100,\n    },\n  };\n  // Frontend-exclusive\n  const [chrono, setChrono] = useState(0);\n  const [logs, setLogs] = useState([]);\n  const logsHandler = LogsHandler(setLogs);\n  // Taqueros/orders-related\n  const taqueroTypes = [\n    { name: \"tripa y cabeza\", canWorkOn: [\"tripa\", \"cabeza\"] },\n    { name: \"asada y suadero 1\", canWorkOn: [\"asada\", \"suadero\"] },\n    { name: \"asada y suadero 2\", canWorkOn: [\"asada\", \"suadero\"] },\n    { name: \"adobada\", canWorkOn: [\"adobada\"] },\n  ];\n  const getDefaultQueuesFor = (types) => {\n    let orders = {};\n    for (let i = 0; i < types.length; i++) {\n      const type = types[i];\n      orders[type.name] = [];\n    }\n    orders.rejected = [];\n    orders.done = [];\n    return orders;\n  };\n  const defaultQueues = getDefaultQueuesFor(taqueroTypes);\n  const [orders, setOrders] = useState(defaultQueues);\n  const defaultTaqueroMetadata = {\n    workingOn: null,\n    queueLength: 0,\n    fan: {\n      active: true,\n      untilNeeded: 0,\n    },\n    rest: {\n      untilNeeded: 1000,\n      timeRested: 0,\n    },\n    tortillas: config.fillingsTop.tortillas,\n    quesadillasInStock: 0,\n    fillings: {\n      salsa: config.fillingsTop.salsa,\n      guacamole: config.fillingsTop.guacamole,\n      cilantro: config.fillingsTop.cilantro,\n      cebolla: config.fillingsTop.cebolla,\n    },\n  };\n  const defaultQuesadilleroMetadata = {\n    fan: {\n      active: true,\n      untilNeeded: 0,\n    },\n    rest: {\n      untilNeeded: 1000,\n      timeRested: 0,\n    },\n    tortillas: 50,\n    quesadillasReady: 0,\n  };\n  const getDefaultMetadataFor = (types) => {\n    let metadata = {};\n    for (let i = 0; i < types.length; i++) {\n      const type = types[i];\n      metadata[type.name] = defaultTaqueroMetadata;\n    }\n    metadata[\"quesadillero\"] = defaultQuesadilleroMetadata;\n    return metadata;\n  };\n  const [metadata, setMetadata] = useState(getDefaultMetadataFor(taqueroTypes));\n  const taqueros = taqueroTypes.map((type) =>\n    Taquero(type.name, type.canWorkOn, setOrders, setMetadata, logsHandler)\n  );\n  const quesadillero = Quesadillero(setMetadata, taqueros);\n  const allocationBalanceHandler = AllocationHandler(\n    taqueros,\n    taqueroTypes,\n    logsHandler,\n    setOrders\n  );\n\n  // Functions\n  const capitalize = (str = \"\") => {\n    return `${str.charAt(0).toUpperCase()}${str.substring(1, str.length)}`;\n  };\n\n  const cleanLogs = () => {\n    localStorage.setItem(\"logs\", JSON.stringify([]));\n    setLogs([]);\n  };\n\n  const formatOrderForTable = (order_) => {\n    let order = { ...order_ };\n    console.log(order.datetime);\n    order.datetime = formatTimeForLogs(order.datetime);\n    order.parts = order.orden.length;\n    order.finishedParts = 0;\n    order.productQuantity = 0;\n    for (let i = 0; i < order.orden.length; i++) {\n      const part = order.orden[i];\n      if (part.status === \"done\") order.finishedParts++;\n      order.productQuantity += part.quantity;\n    }\n    delete order.orden;\n    order.stepsDone = order.response !== undefined ? order.response.length : 0;\n    delete order.response;\n    return order;\n  };\n\n  const formatOrdersForTable = (orders) => {\n    console.log(orders);\n    let res = [];\n    for (let i = 0; i < orders.length; i++) {\n      if (orders[i] == null) continue;\n      res.push(formatOrderForTable(orders[i]));\n    }\n    return res;\n  };\n\n  const formatTimeForLogs = (timestamp) => {\n    const date = new Date(timestamp);\n    return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()} (${date.getMilliseconds()}ms)`;\n  };\n\n  const ordersAreFinished = () => {\n    for (let i = 0; i < taqueros.length; i++) {\n      if (taqueros[i].getQueueSize() > 0) return false;\n    }\n    if (JSON.parse(localStorage.getItem(\"ordersToReAllocate\")).length > 0)\n      return false;\n    return true;\n  };\n\n  const restartMetadata = () => {\n    setMetadata(getDefaultMetadataFor(taqueroTypes));\n    localStorage.setItem(\n      \"metadata\",\n      JSON.stringify(getDefaultMetadataFor(taqueroTypes))\n    );\n  };\n\n  const restartOrders = () => {\n    OrdersHandler(setOrders, null, defaultQueues).restartRUDA();\n  };\n\n  const setup = () => {\n    // Set initial local storage values\n    localStorage.setItem(\"orders\", JSON.stringify(defaultQueues));\n    localStorage.setItem(\"logs\", JSON.stringify([]));\n    localStorage.setItem(\n      \"metadata\",\n      JSON.stringify(getDefaultMetadataFor(taqueroTypes))\n    );\n    localStorage.setItem(\"ordersToReAllocate\", JSON.stringify([]));\n  };\n\n  const startRUDA = async () => {\n    if (isRunning) return;\n    setIsRunning(true);\n    cleanLogs();\n    restartMetadata();\n    restartOrders();\n    localStorage.setItem(\"RUDAIsWorking\", JSON.stringify(true));\n\n    // Start Allocation and balance handler\n    allocationBalanceHandler.start(sampleInput);\n\n    // Start every taquero\n    for (let i = 0; i < taqueros.length; i++) {\n      taqueros[i].startWorking();\n    }\n    // Start quesadillero\n    quesadillero.start();\n    // Start loop until everything is done\n    let counter = 0;\n    while (true) {\n      const now = Date.now();\n      await timeout(100);\n      if (ordersAreFinished()) {\n        localStorage.setItem(\"RUDAIsWorking\", JSON.stringify(false));\n        break;\n      }\n      counter += Date.now() - now;\n      setChrono((counter / 1000).toFixed(1));\n    }\n    setIsRunning(false);\n  };\n\n  const timeout = (ms) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  };\n\n  // Logic\n  // eslint-disable-next-line\n  useEffect(() => {\n    if (firstLoad) {\n      setFirstLoad(false);\n      setup();\n    }\n  });\n\n  // Render\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <img\n          src=\"https://raw.githubusercontent.com/ulisesaviles/os-tacoshop-ruda/main/RUDA.png\"\n          className=\"logo\"\n          alt=\"logo\"\n        />\n        {!isRunning ? (\n          <button onClick={startRUDA} className=\"startBtn\">\n            Start RUDA\n          </button>\n        ) : (\n          <div className=\"running\">Running RUDA...</div>\n        )}\n        <p className=\"chrono\">({chrono}s)</p>\n      </div>\n      <div className=\"contentContainer\">\n        <div className=\"contentLeftContainer\">\n          <div className=\"taquerosContainer\">\n            {/* Taqueros */}\n            {taqueroTypes.map((taqueroType) => {\n              const index = taqueroTypes.indexOf(taqueroType);\n              return (\n                <div key={index} className=\"taqueroContainer\">\n                  <h4 className=\"taqueroName\">Taquero de {taqueroType.name}</h4>\n                  <div className=\"taqueroMetadataContainer\">\n                    <h3 className=\"metadata\">Metadata</h3>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">\n                        Orders in queue:\n                      </h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].queueLength}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Working on:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].workingOn === null\n                          ? \"null\"\n                          : metadata[taqueroType.name].workingOn}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Fan active:</h6>\n                      <p className=\"actualMetadata\">\n                        {JSON.stringify(metadata[taqueroType.name].fan.active)}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Chalán:</h6>\n                      <p className=\"actualMetadata\">X</p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Time rested:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].rest.timeRested}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">\n                        Tacos untill rest:\n                      </h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].rest.untilNeeded}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">\n                        Quesadillas in stock:\n                      </h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].quesadillasInStock}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Tortillas</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].tortillas}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Cilantro:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].fillings.cilantro}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Cebolla:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].fillings.cebolla}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Salsa:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].fillings.salsa}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Guacamole:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].fillings.guacamole}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n            {/* Quesadillero */}\n            <div className=\"taqueroContainer\">\n              <h4 className=\"taqueroName\">Quesadillero</h4>\n              <div className=\"taqueroMetadataContainer\">\n                <h3 className=\"metadata\">Metadata</h3>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">\n                    Ready quesadillas:\n                  </h6>\n                  <p className=\"actualMetadata\">\n                    {metadata.quesadillero.quesadillasReady}\n                  </p>\n                </div>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">Fan active:</h6>\n                  <p className=\"actualMetadata\">\n                    {JSON.stringify(metadata.quesadillero.fan.active)}\n                  </p>\n                </div>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">Time rested:</h6>\n                  <p className=\"actualMetadata\">\n                    {metadata.quesadillero.rest.timeRested}\n                  </p>\n                </div>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">\n                    Quesadillas untill rest:\n                  </h6>\n                  <p className=\"actualMetadata\">\n                    {metadata.quesadillero.rest.untilNeeded}\n                  </p>\n                </div>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">Tortillas</h6>\n                  <p className=\"actualMetadata\">\n                    {metadata.quesadillero.tortillas}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <h2 className=\"orders\">Orders</h2>\n          <div className=\"ordersContainer\">\n            {Object.keys(orders).map((key) => (\n              <div key={key} className=\"tableSuperContainer\">\n                <p className=\"tableName\">{capitalize(key)}</p>\n                <Table data={formatOrdersForTable([...orders[key]])} />\n              </div>\n            ))}\n          </div>\n        </div>\n        <div className=\"logsContainer\">\n          <h2 className=\"logsTitle\">Logs:</h2>\n          <p className=\"logsSubtitle\">(De más nuevo a más viejo)</p>\n          <div className=\"logsContentContainer\">\n            {logs.map((log) => (\n              <div className=\"logContainer\">\n                <div className=\"logHeaderContainer\">\n                  <h5 className=\"logTitle\">{log.title}</h5>\n                  <p className=\"logTime\">{formatTimeForLogs(log.time)}</p>\n                </div>\n                {log.message}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n// TO-DO'S\n// FRI\n//   Quesadillero should give quesadillas to people who need it\n//   Balanceo (when taquero needs to rest)\n//   Scheduler\n// SAT\n//   Chalanes\n// SUN\n//   Doc and extras\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}