{"version":3,"sources":["config/ordersStateHandler.js","config/metadataHandler.js","objects/taquero.js","objects/quesadillero.js","config/logsHandler.js","config/allocationAndBalancing.js","config/chalanesHandler.js","components/table.js","App.js","index.js"],"names":["Handler","setOrdersFunction","taqueroType","defaultQueues","getOrders","orders","localStorage","getItem","JSON","parse","getAllOrders","setOrders","generalOrders","setItem","stringify","pushOrder","order","push","restartRUDA","setMetadataFunction","taqueroName","timeout","ms","Promise","resolve","setTimeout","consumeFillings","fillingNames","a","metadata","getMetadata","i","length","fillingName","fillings","setMetadata","attribute","value","generalMetadata","useTortilla","tortillas","madeTaco","rest","untilNeeded","fan","madePart","queueLength","workingOn","getUnoccupiedTaqueros","res","keys","Object","key","resting","Taquero","name","canWorkOn","ordersSetter","logsHandler","fillingsTop","ordersHandler","OrdersHandler","metadataHandler","MetadataHandler","queue","fillFilling","filling","fillingNeedsToBeFilled","times","guacamole","salsa","cilantro","cebolla","newFillings","getNextOrderAndPartIndex","getPartToParticipate","orden","getQuesadillasInStock","quesadillasInStock","parts","part","includes","meat","status","type","giveOrdersAway","reAllocateOrder","hasEnoughFillings","ingredients","log","message","notifyResting","putFillings","request_id","timeToRest","timeRested","rest1Second","meta","tempResting","startWorking","workOnNextOrder","orderIndex","partIndex","shift","start","Date","now","part_id","quantity","finished_products","newStock","response","who","when","toISOString","what","time","insertToQueue","newElements","getQueueSize","giveQuesadilla","restart","getTortillas","isResting","Quesadillero","taqueros","maxTortillas","getReadyQuesadillas","quesadillasReady","watchForSpaceToPutQuesadillas","currentTortillas","min","index","taquero","setLogsFunction","title","logs","unshift","pop","taqueroTypes","checked","awsConfig","accessKeyId","secretAccessKey","window","prompt","region","AWS","config","update","checkAWSCredentials","sqs","SQS","apiVersion","QueueUrl","validMeatTypes","j","meatType","getValidMeatTipesForTaqueros","validIngredients","handlers","rejected","done","allocateOrder","listSize","taqueroIndex","taqueroCanWorkOnOrder","insertTaquero","orderIsComplete","completeOrder","deleteMessage","ReceiptHandle","handleEmptyOrder","filteredOrder","invalid","tacoCounter","rejectOrder","datetime","toString","aPartIsInvalid","split","orderId","subOrderId","parseInt","rejectPart","cuantity","ingredient","delay_counter","temp","e","giveOrders","allOrders","ordersKeys","taqueroWithName","splice","receiveMessages","receiveMessage","err","data","Messages","reazon","partId","watchForOrdersToReallocate","watchForUnoccupiedTaqueros","messages","Body","ordersLeft","unoccupied","chalanName","placeTortillas","chalan","servesTaqueros","work","milisecs","tempTime","chalanes","undefined","map","setup","forEach","Table","props","headers","className","header","row","indexOf","App","useState","isRunning","setIsRunning","firstLoad","setFirstLoad","chrono","setChrono","setLogs","LogsHandler","types","getDefaultQueuesFor","defaultTaqueroMetadata","active","defaultQuesadilleroMetadata","getDefaultMetadataFor","quesadillero","allocationBalanceHandler","AllocationHandler","chalanesHandler","ChalanesHandler","capitalize","str","charAt","toUpperCase","substring","cleanRUDA","restartMetadata","restartOrders","formatOrderForTable","order_","formatTimeForLogs","finishedParts","productQuantity","stepsDone","formatOrdersForTable","timestamp","date","getHours","getMinutes","getSeconds","getMilliseconds","ordersAreFinished","startRUDA","counter","toFixed","console","useEffect","src","alt","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebcd0470.chunk.js","sourcesContent":["const Handler = (setOrdersFunction, taqueroType, defaultQueues) => {\r\n  const getOrders = () => {\r\n    const orders = localStorage.getItem(\"orders\");\r\n    return JSON.parse(orders);\r\n  };\r\n\r\n  const pushOrder = (order) => {\r\n    let generalOrders = getOrders();\r\n    generalOrders[taqueroType].push(order);\r\n    setOrdersFunction(generalOrders);\r\n    localStorage.setItem(\"orders\", JSON.stringify(generalOrders));\r\n  };\r\n\r\n  const restartRUDA = () => {\r\n    setOrdersFunction(defaultQueues);\r\n    localStorage.setItem(\"orders\", JSON.stringify(defaultQueues));\r\n  };\r\n\r\n  const setOrders = (orders) => {\r\n    let generalOrders = getOrders();\r\n    generalOrders[taqueroType] = orders;\r\n    setOrdersFunction(generalOrders);\r\n    localStorage.setItem(\"orders\", JSON.stringify(generalOrders));\r\n  };\r\n\r\n  return { getAllOrders: getOrders, setOrders, pushOrder, restartRUDA };\r\n};\r\n\r\nexport default Handler;\r\n","const Handler = (setMetadataFunction, taqueroName) => {\r\n  const timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\n  const consumeFillings = async (fillingNames) => {\r\n    let metadata = getMetadata();\r\n    for (let i = 0; i < fillingNames.length; i++) {\r\n      const fillingName = fillingNames[i];\r\n      metadata[taqueroName].fillings[fillingName]--;\r\n      await timeout(500);\r\n      setMetadata(\"fillings\", metadata[taqueroName].fillings);\r\n    }\r\n  };\r\n\r\n  const getMetadata = () => {\r\n    const metadata = localStorage.getItem(\"metadata\");\r\n    return JSON.parse(metadata);\r\n  };\r\n\r\n  const getUnoccupiedTaqueros = () => {\r\n    let res = [];\r\n    const metadata = getMetadata();\r\n    const keys = Object.keys(metadata);\r\n    for (let i = 0; i < keys.length; i++) {\r\n      const key = keys[i];\r\n      if (metadata[key].workingOn === null && !metadata[key].resting)\r\n        res.push(key);\r\n    }\r\n    return res;\r\n  };\r\n\r\n  const madePart = () => {\r\n    let metadata = getMetadata();\r\n    // One less order in queue\r\n    metadata[taqueroName].queueLength--;\r\n    // Not working on any\r\n    metadata[taqueroName].workingOn = null;\r\n    // Set it\r\n    setMetadataFunction(metadata);\r\n    localStorage.setItem(\"metadata\", JSON.stringify(metadata));\r\n  };\r\n\r\n  const madeTaco = () => {\r\n    let metadata = getMetadata();\r\n    // One taco less in rest\r\n    metadata[taqueroName].rest.untilNeeded--;\r\n    // One taco less in fan\r\n    metadata[taqueroName].fan.untilNeeded--;\r\n    // Set it\r\n    setMetadataFunction(metadata);\r\n    localStorage.setItem(\"metadata\", JSON.stringify(metadata));\r\n  };\r\n\r\n  const setMetadata = (attribute, value) => {\r\n    let generalMetadata = getMetadata();\r\n    generalMetadata[taqueroName][attribute] = value;\r\n    setMetadataFunction(generalMetadata);\r\n    localStorage.setItem(\"metadata\", JSON.stringify(generalMetadata));\r\n  };\r\n\r\n  const useTortilla = () => {\r\n    let metadata = getMetadata();\r\n    metadata[taqueroName].tortillas--;\r\n    setMetadata(\"tortillas\", metadata[taqueroName].tortillas);\r\n  };\r\n\r\n  return {\r\n    getMetadata,\r\n    setMetadata,\r\n    consumeFillings,\r\n    useTortilla,\r\n    madeTaco,\r\n    madePart,\r\n    getUnoccupiedTaqueros,\r\n  };\r\n};\r\n\r\nexport default Handler;\r\n","// Handlers\r\nimport OrdersHandler from \"../config/ordersStateHandler\";\r\nimport MetadataHandler from \"../config/metadataHandler\";\r\n\r\n// Actual object\r\nconst Taquero = (\r\n  name,\r\n  canWorkOn,\r\n  ordersSetter,\r\n  setMetadataFunction,\r\n  logsHandler,\r\n  fillingsTop\r\n) => {\r\n  // Handlers and helpers inicialization\r\n  const timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n  const ordersHandler = OrdersHandler(ordersSetter, name);\r\n  const metadataHandler = MetadataHandler(setMetadataFunction, name);\r\n\r\n  // Attributes\r\n  let queue = [];\r\n  const tacosPerSprint = 10;\r\n\r\n  // Functions\r\n  const fillFilling = async (filling) => {\r\n    if (!fillingNeedsToBeFilled(filling)) {\r\n      await timeout(100);\r\n      return;\r\n    }\r\n    const times = {\r\n      guacamole: 20,\r\n      salsa: 15,\r\n      cilantro: 10,\r\n      cebolla: 10,\r\n      tortillas: 5,\r\n    };\r\n    if (filling !== \"tortillas\") {\r\n      let newFillings = metadataHandler.getMetadata()[name].fillings;\r\n      newFillings[filling] = fillingsTop[filling];\r\n      await timeout(times[filling] * 1000);\r\n      metadataHandler.setMetadata(\"fillings\", newFillings);\r\n    } else {\r\n      await timeout(times.tortillas * 1000);\r\n      metadataHandler.setMetadata(\"tortillas\", fillingsTop.tortillas);\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const fillingNeedsToBeFilled = (filling) => {\r\n    if (filling !== \"tortillas\")\r\n      return (\r\n        metadataHandler.getMetadata()[name].fillings[filling] <\r\n        fillingsTop[filling]\r\n      );\r\n    return (\r\n      metadataHandler.getMetadata()[name].tortillas < fillingsTop.tortillas\r\n    );\r\n  };\r\n\r\n  const getNextOrderAndPartIndex = (queue) => {\r\n    const orderIndex = 0;\r\n    return [orderIndex, getPartToParticipate(queue[orderIndex].orden)];\r\n  };\r\n\r\n  const getOrders = () => {\r\n    return ordersHandler.getAllOrders()[name];\r\n  };\r\n\r\n  const getQuesadillasInStock = () => {\r\n    return metadataHandler.getMetadata()[name].quesadillasInStock;\r\n  };\r\n\r\n  const getPartToParticipate = (parts) => {\r\n    for (let i = 0; i < parts.length; i++) {\r\n      const part = parts[i];\r\n      if (\r\n        canWorkOn.includes(part.meat) &&\r\n        part.status !== \"done\" &&\r\n        (part.type !== \"quesadilla\" || getQuesadillasInStock() >= 1)\r\n      ) {\r\n        return i;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const getTortillas = () => {\r\n    return metadataHandler.getMetadata()[name].tortillas;\r\n  };\r\n\r\n  const giveOrdersAway = () => {\r\n    const orders = getOrders();\r\n    for (let i = 0; i < orders.length; i++) {\r\n      const order = orders[i];\r\n      reAllocateOrder(order);\r\n    }\r\n    ordersHandler.setOrders([]);\r\n  };\r\n\r\n  const giveQuesadilla = () => {\r\n    const newStock = metadataHandler.getMetadata()[name].quesadillasInStock + 1;\r\n    metadataHandler.setMetadata(\"quesadillasInStock\", newStock);\r\n  };\r\n\r\n  const hasEnoughFillings = (ingredients) => {\r\n    const fillings = metadataHandler.getMetadata()[name].fillings;\r\n    for (let i = 0; i < ingredients.length; i++) {\r\n      const ingredient = ingredients[i];\r\n      if (fillings[ingredient] === 0) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const insertToQueue = (newElements) => {\r\n    queue = [...getOrders(), ...newElements];\r\n    ordersHandler.setOrders(queue);\r\n    log(`Inserted ${newElements.length} element(s) succesfully`);\r\n    metadataHandler.setMetadata(\"queueLength\", queue.length);\r\n    return queue;\r\n  };\r\n\r\n  const isResting = () => {\r\n    return metadataHandler.getMetadata()[name].rest.resting;\r\n  };\r\n\r\n  const log = (message) => {\r\n    logsHandler.log(`Taquero ${name}:`, message);\r\n  };\r\n\r\n  const needsToRest = () => {\r\n    return metadataHandler.getMetadata()[name].rest.untilNeeded === 0;\r\n  };\r\n\r\n  const notifyResting = () => {\r\n    let rest = metadataHandler.getMetadata()[name].rest;\r\n    rest.resting = true;\r\n    metadataHandler.setMetadata(\"rest\", rest);\r\n  };\r\n\r\n  const putFillings = async (part) => {\r\n    await metadataHandler.consumeFillings(part.ingredients);\r\n  };\r\n\r\n  const reAllocateOrder = async (order) => {\r\n    log(`I'll give order ${order.request_id} to allocation handler`);\r\n    const orders = JSON.parse(localStorage.getItem(\"ordersToReAllocate\"));\r\n    localStorage.setItem(\r\n      \"ordersToReAllocate\",\r\n      JSON.stringify([...orders, order])\r\n    );\r\n  };\r\n\r\n  const rest = async () => {\r\n    const timeToRest = 60 - metadataHandler.getMetadata()[name].rest.timeRested;\r\n    if (timeToRest > 0) {\r\n      log(`I'll rest ${timeToRest} secs`);\r\n      await timeout(timeToRest * 1000);\r\n    }\r\n    metadataHandler.setMetadata(\"rest\", {\r\n      untilNeeded: 1000,\r\n      timeRested: 0,\r\n      resting: false,\r\n    });\r\n  };\r\n\r\n  const restart = () => {\r\n    ordersHandler.setOrders([]);\r\n  };\r\n\r\n  const rest1Second = async () => {\r\n    let meta = metadataHandler.getMetadata()[name];\r\n    meta.rest.tempResting = true;\r\n    metadataHandler.setMetadata(\"rest\", meta.rest);\r\n\r\n    await timeout(1000);\r\n\r\n    meta = metadataHandler.getMetadata()[name];\r\n    meta.rest.timeRested++;\r\n    meta.rest.tempResting = false;\r\n    metadataHandler.setMetadata(\"rest\", meta.rest);\r\n  };\r\n\r\n  const startWorking = async () => {\r\n    while (true) {\r\n      if (getOrders().length === 0) {\r\n        await rest1Second();\r\n      } else await workOnNextOrder();\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n    }\r\n  };\r\n\r\n  const workOnNextOrder = async () => {\r\n    // Get orders\r\n    queue = getOrders();\r\n    // Get an order and a part to participate in\r\n    const [orderIndex, partIndex] = getNextOrderAndPartIndex(queue);\r\n    let part = queue[orderIndex].orden[partIndex];\r\n\r\n    // If not enough quesadillas, rest 1 sec to avoid infinite loop\r\n    if (\r\n      partIndex === null || // Cannot currently work on it (fillings, quesadillas, etc)\r\n      (part.type === \"quesadilla\" && getQuesadillasInStock() === 0)\r\n    ) {\r\n      reAllocateOrder(queue.shift());\r\n      ordersHandler.setOrders(queue);\r\n      await rest1Second();\r\n      return;\r\n    }\r\n    const start = Date.now();\r\n\r\n    // Start working on it\r\n    queue[orderIndex].status = \"working\";\r\n    ordersHandler.setOrders(queue);\r\n    part.status = \"working\";\r\n    metadataHandler.setMetadata(\"workingOn\", part.part_id);\r\n    // Make the tacos\r\n    let quantity = 0;\r\n    for (let i = 0; part.quantity > part.finished_products; i++) {\r\n      if (quantity >= tacosPerSprint) {\r\n        log(\r\n          `I have done ${tacosPerSprint} ${part.type}s for part ${part.part_id} `\r\n        );\r\n        part.status = \"open\";\r\n        break;\r\n      }\r\n      // If needs to rest, rest and give away all orders\r\n      if (needsToRest()) {\r\n        notifyResting();\r\n        giveOrdersAway();\r\n        await rest();\r\n        return;\r\n      }\r\n\r\n      // Validations:\r\n      // Has not anought fillings\r\n      if (!hasEnoughFillings(part.ingredients)) {\r\n        log(`I have not enought fillings to continue`);\r\n        part.status = \"open\";\r\n        break;\r\n      }\r\n      // If quesadillas are not enough\r\n      if (part.type === \"quesadilla\" && getQuesadillasInStock() <= 0) {\r\n        log(`I have not enought quesadillas to continue`);\r\n        part.status = \"open\";\r\n        break;\r\n      }\r\n\r\n      // If quesdilla, use a quesadilla\r\n      if (part.type === \"quesadilla\") {\r\n        const newStock =\r\n          metadataHandler.getMetadata()[name].quesadillasInStock - 1;\r\n        metadataHandler.setMetadata(\"quesadillasInStock\", newStock);\r\n      } else if (part.type !== \"quesadilla\") {\r\n        // If taco, use a tortilla\r\n        metadataHandler.useTortilla();\r\n        await timeout(1000);\r\n      }\r\n\r\n      // Put fllings\r\n      await putFillings(part);\r\n\r\n      // Updates\r\n      metadataHandler.madeTaco();\r\n      part.finished_products += 1;\r\n      if (part.quantity === part.finished_products) part.status = \"done\";\r\n      quantity++;\r\n    }\r\n\r\n    // Set it\r\n    queue[orderIndex].orden[partIndex] = part;\r\n    queue[orderIndex].response.push({\r\n      who: `Taquero de ${name}`,\r\n      when: new Date().toISOString(),\r\n      what: `Made ${quantity} ${part.meat} ${part.type} (part ${part.part_id})`,\r\n      time: Date.now() - start,\r\n    });\r\n    queue[orderIndex].status = \"open\";\r\n    metadataHandler.madePart();\r\n\r\n    // Re-allocate it\r\n    reAllocateOrder(queue.shift());\r\n    ordersHandler.setOrders(queue);\r\n\r\n    // Log it\r\n    log(\r\n      `${\r\n        part.quantity === part.finished_products ? \"Finished\" : \"Putted aside\"\r\n      } part \"${part.part_id}\" (${part.finished_products}/${part.quantity})  ${\r\n        queue.length\r\n      } left in my list`\r\n    );\r\n\r\n    // Return it\r\n    return queue.length;\r\n  };\r\n\r\n  // Actual object\r\n  return {\r\n    name,\r\n    insertToQueue,\r\n    getQueueSize: () => getOrders().length,\r\n    workOnNextOrder,\r\n    getOrders,\r\n    startWorking,\r\n    canWorkOn,\r\n    getQuesadillasInStock,\r\n    giveQuesadilla,\r\n    restart,\r\n    fillFilling,\r\n    getTortillas,\r\n    isResting,\r\n  };\r\n};\r\n\r\nexport default Taquero;\r\n","// Handlers\r\nimport MetadataHandler from \"../config/metadataHandler\";\r\n\r\nconst Quesadillero = (setMetadataFunction, taqueros, maxTortillas) => {\r\n  // Handlers and helpers inicialization\r\n  const timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n  const metadataHandler = MetadataHandler(setMetadataFunction, \"quesadillero\");\r\n  const taquerosQuesadillasSpace = 5;\r\n\r\n  const getReadyQuesadillas = () => {\r\n    return metadataHandler.getMetadata()[\"quesadillero\"].quesadillasReady;\r\n  };\r\n\r\n  const getTortillas = async () => {\r\n    await timeout(5_000);\r\n    metadataHandler.setMetadata(\"tortillas\", maxTortillas);\r\n  };\r\n\r\n  const saveQuesadilla = () => {\r\n    metadataHandler.setMetadata(\"quesadillasReady\", getReadyQuesadillas() + 1);\r\n  };\r\n\r\n  const start = async () => {\r\n    watchForSpaceToPutQuesadillas();\r\n    while (true) {\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n      // Get tortillas if needed\r\n      let currentTortillas =\r\n        metadataHandler.getMetadata()[\"quesadillero\"].tortillas;\r\n      if (currentTortillas === 0) {\r\n        await getTortillas();\r\n        currentTortillas =\r\n          metadataHandler.getMetadata()[\"quesadillero\"].tortillas;\r\n      }\r\n      // Use Tortillas\r\n      metadataHandler.setMetadata(\"tortillas\", currentTortillas - 1);\r\n      await timeout(20_000); // Fucking long time to make a tortilla with cheese\r\n      let min = {\r\n        index: null,\r\n        quantity: 6,\r\n      };\r\n      for (let i = 0; i < taqueros.length; i++) {\r\n        const taquero = taqueros[i];\r\n        if (\r\n          taquero.getQuesadillasInStock() < min.quantity &&\r\n          taquero.getQuesadillasInStock() < taquerosQuesadillasSpace\r\n        )\r\n          min = { index: i, quantity: taquero.getQuesadillasInStock() };\r\n      }\r\n      if (min.index !== null) {\r\n        taqueros[min.index].giveQuesadilla();\r\n      } else saveQuesadilla();\r\n    }\r\n  };\r\n\r\n  const watchForSpaceToPutQuesadillas = async () => {\r\n    while (true) {\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n      let quesadillasReady = getReadyQuesadillas();\r\n      if (quesadillasReady > 0) {\r\n        // Iterate every taquero\r\n        for (let i = 0; i < taqueros.length; i++) {\r\n          const taquero = taqueros[i];\r\n          while (\r\n            taquero.getQuesadillasInStock() < taquerosQuesadillasSpace &&\r\n            quesadillasReady > 0\r\n          ) {\r\n            // Use ready quesadilla\r\n            metadataHandler.setMetadata(\r\n              \"quesadillasReady\",\r\n              getReadyQuesadillas() - 1\r\n            );\r\n            // Give it away\r\n            taquero.giveQuesadilla();\r\n            // rewrite quesadillas ready\r\n            quesadillasReady = getReadyQuesadillas();\r\n          }\r\n        }\r\n      }\r\n      await timeout(100);\r\n    }\r\n  };\r\n\r\n  return { start };\r\n};\r\n\r\nexport default Quesadillero;\r\n","const Handler = (setLogsFunction) => {\r\n  const log = (title, message) => {\r\n    let logs = JSON.parse(localStorage.getItem(\"logs\"));\r\n    logs.unshift({ title, message, time: Date.now() });\r\n\r\n    if (logs.length > 100) logs.pop();\r\n    setLogsFunction(logs);\r\n    localStorage.setItem(\"logs\", JSON.stringify(logs));\r\n  };\r\n\r\n  return { log };\r\n};\r\n\r\nexport default Handler;\r\n","// Handlers\r\nimport OrdersHandler from \"../config/ordersStateHandler\";\r\nimport MetadataHandler from \"../config/metadataHandler\";\r\n\r\n// AWS\r\nimport AWS from \"aws-sdk\";\r\n\r\n// Sample input\r\nimport sampleInput from \"../samples/miniOrdenes.json\";\r\n\r\nconst Handler = (\r\n  taqueros,\r\n  taqueroTypes,\r\n  logsHandler,\r\n  setOrdersFunction,\r\n  setMetadataFunction\r\n) => {\r\n  const timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n  const metadataHandler = MetadataHandler(setMetadataFunction);\r\n\r\n  // AWS\r\n  const checkAWSCredentials = () => {\r\n    let awsConfig = localStorage.getItem(\"awsConfig\");\r\n    if (!awsConfig) {\r\n      awsConfig = {};\r\n      awsConfig.accessKeyId = window.prompt(\r\n        \"Ingresa el accessKeyId del equipo 9: \"\r\n      );\r\n      awsConfig.secretAccessKey = window.prompt(\r\n        \"Ingresa el secretAccessKey del equipo 9: \"\r\n      );\r\n      awsConfig.region = \"us-east-1\";\r\n      localStorage.setItem(\"awsConfig\", JSON.stringify(awsConfig));\r\n    } else {\r\n      awsConfig = JSON.parse(awsConfig);\r\n      if (\r\n        awsConfig.accessKeyId === null ||\r\n        awsConfig.secretAccessKey === null\r\n      ) {\r\n        awsConfig = {};\r\n        awsConfig.accessKeyId = window.prompt(\r\n          \"Ingresa el accessKeyId del equipo 9: \"\r\n        );\r\n        awsConfig.secretAccessKey = window.prompt(\r\n          \"Ingresa el secretAccessKey del equipo 9: \"\r\n        );\r\n        awsConfig.region = \"us-east-1\";\r\n        localStorage.setItem(\"awsConfig\", JSON.stringify(awsConfig));\r\n      }\r\n      // else console.log(\"FOUND CREDENTIALS: \", awsConfig);\r\n    }\r\n    AWS.config.update({ ...awsConfig, region: \"us-east-1\" });\r\n  };\r\n  let checked = false;\r\n  if (!checked) {\r\n    checked = true;\r\n    checkAWSCredentials();\r\n  }\r\n  const sqs = new AWS.SQS({ apiVersion: \"2012-11-05\" });\r\n  const QueueUrl =\r\n    \"https://sqs.us-east-1.amazonaws.com/292274580527/sqs_cc106_team_9\";\r\n\r\n  const getValidMeatTipesForTaqueros = (taqueroTypes) => {\r\n    let res = [];\r\n    for (let i = 0; i < taqueroTypes.length; i++) {\r\n      const type = taqueroTypes[i];\r\n      for (let j = 0; j < type.canWorkOn.length; j++) {\r\n        const meatType = type.canWorkOn[j];\r\n        if (!res.includes(meatType)) res.push(meatType);\r\n      }\r\n    }\r\n    return res;\r\n  };\r\n\r\n  const validMeatTypes = getValidMeatTipesForTaqueros(taqueroTypes);\r\n  const validIngredients = [\"cilantro\", \"cebolla\", \"salsa\", \"guacamole\"];\r\n  let handlers = {};\r\n  for (let i = 0; i < taqueroTypes.length; i++) {\r\n    const taqueroType = taqueroTypes[i];\r\n    handlers[taqueroType.name] = OrdersHandler(\r\n      setOrdersFunction,\r\n      taqueroType.name\r\n    );\r\n  }\r\n  handlers.rejected = OrdersHandler(setOrdersFunction, \"rejected\");\r\n  handlers.done = OrdersHandler(setOrdersFunction, \"done\");\r\n\r\n  const allocateOrder = (order) => {\r\n    let min = {\r\n      name: null,\r\n      listSize: taqueros[0].getQueueSize(),\r\n      taqueroIndex: -1,\r\n    };\r\n    for (let i = 0; i < taqueros.length; i++) {\r\n      const taquero = taqueros[i];\r\n      if (!taqueroCanWorkOnOrder(taquero, order)) continue;\r\n      if (taquero.getQueueSize() <= min.listSize) {\r\n        min = {\r\n          name: taquero.name,\r\n          listSize: taquero.getQueueSize(),\r\n          taqueroIndex: i,\r\n        };\r\n      }\r\n    }\r\n    if (min.name !== null) {\r\n      insertTaquero(min.taqueroIndex, [order]);\r\n      log(`Asigned order ${order.request_id} to ${min.name}`);\r\n      return true;\r\n    } else if (orderIsComplete(order)) {\r\n      completeOrder({ ...order });\r\n      return true;\r\n    } else {\r\n      const orders = JSON.parse(localStorage.getItem(\"ordersToReAllocate\"));\r\n      localStorage.setItem(\r\n        \"ordersToReAllocate\",\r\n        JSON.stringify([...orders, order])\r\n      );\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const completeOrder = (order) => {\r\n    order.status = \"done\";\r\n    handlers.done.pushOrder(order);\r\n    log(`Order ${order.request_id} is done.`);\r\n  };\r\n\r\n  const deleteMessage = async (ReceiptHandle) => {\r\n    return new Promise((resolve) => {\r\n      sqs.deleteMessage(\r\n        {\r\n          QueueUrl,\r\n          ReceiptHandle,\r\n        },\r\n        () => resolve()\r\n      );\r\n    });\r\n  };\r\n\r\n  const handleEmptyOrder = (order) => {\r\n    order.status = \"done\";\r\n    handlers.done.pushOrder(order);\r\n    log(`Order ${order.request_id} was empty, so its done.`);\r\n  };\r\n\r\n  const insertTaquero = (taqueroIndex, orders) => {\r\n    taqueros[taqueroIndex].insertToQueue(orders);\r\n  };\r\n\r\n  const fillQueue = async (input) => {\r\n    for (let i = 0; i < input.length; i++) {\r\n      const order = input[i];\r\n      await sendMessage(order);\r\n    }\r\n  };\r\n\r\n  const filteredOrder = (order) => {\r\n    const invalid = { invalid: true };\r\n    let tacoCounter = 0;\r\n    const tacoMax = 300;\r\n    const tacoMaxPerPart = 100;\r\n    try {\r\n      if (typeof order.request_id !== \"number\" || order.request_id < 0) {\r\n        rejectOrder(order, \"invalid id\");\r\n        return invalid;\r\n      }\r\n      if (new Date(order.datetime).toString() === \"Invalid Date\") {\r\n        rejectOrder(order, \"invalid date\");\r\n        return invalid;\r\n      }\r\n      if (order.status !== \"open\") {\r\n        rejectOrder(order, `invalid status '${order.status}'`);\r\n        return invalid;\r\n      }\r\n      let aPartIsInvalid = false;\r\n      if (order.orden.length > 10) return invalid;\r\n      for (let i = 0; i < order.orden.length; i++) {\r\n        const part = order.orden[i];\r\n        tacoCounter += part.quantity;\r\n        if (tacoCounter > tacoMax) {\r\n          rejectOrder(order, \"the order has more than 300 products\");\r\n          return invalid;\r\n        }\r\n        const [orderId, subOrderId] = part.part_id.split(\"-\");\r\n        if (parseInt(orderId) !== order.request_id) {\r\n          rejectPart(null, \"Invalid Id\");\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (\r\n          parseInt(subOrderId) > order.orden.length ||\r\n          parseInt(subOrderId) !== i\r\n        ) {\r\n          rejectPart(null, \"Invalid Id\");\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (part.cuantity > tacoMaxPerPart) {\r\n          rejectPart(part.part_id, `has more than ${tacoMaxPerPart} products`);\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (!validMeatTypes.includes(part.meat)) {\r\n          rejectPart(\r\n            part.part_id,\r\n            `\"${part.meat}\" is not a valid type of meat`\r\n          );\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (![\"taco\", \"quesadilla\"].includes(part.type)) {\r\n          rejectPart(\r\n            part.part_id,\r\n            `\"${part.type}\" is not a valid type of product`\r\n          );\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (part.status !== \"open\") {\r\n          rejectPart(\r\n            part.part_id,\r\n            `\"${part.status}\" is not a valid initial status`\r\n          );\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        for (let j = 0; j < part.ingredients.length; j++) {\r\n          const ingredient = part.ingredients[j];\r\n          if (!validIngredients.includes(ingredient)) {\r\n            rejectPart(\r\n              part.part_id,\r\n              `\"${ingredient}\" is not a valid ingredient`\r\n            );\r\n            aPartIsInvalid = true;\r\n            delete order.orden[i];\r\n            continue;\r\n          }\r\n        }\r\n        order.orden[i].delay_counter = 0;\r\n        order.orden[i].finished_products = 0;\r\n        order.response = [];\r\n      }\r\n      if (aPartIsInvalid) {\r\n        const temp = order.orden;\r\n        order.orden = [];\r\n        for (let i = 0; i < temp.length; i++) {\r\n          const part = temp[i];\r\n          if (!part) continue;\r\n          order.orden.push(part);\r\n        }\r\n      }\r\n      return order;\r\n    } catch (e) {\r\n      return invalid;\r\n    }\r\n  };\r\n\r\n  const giveOrders = async (taqueroName) => {\r\n    // IF no longer unocuppied\r\n    if (!metadataHandler.getUnoccupiedTaqueros().includes(taqueroName)) return;\r\n\r\n    // Get all open orders in where taquero can participate\r\n    let allOrders = handlers.done.getAllOrders();\r\n    const ordersKeys = Object.keys(allOrders);\r\n    for (let i = 0; i < ordersKeys.length; i++) {\r\n      const key = ordersKeys[i];\r\n      if ([\"done\", \"rejected\", taqueroName].includes(key)) continue;\r\n      for (let j = 0; j < allOrders[key].length; j++) {\r\n        const order = allOrders[key][j];\r\n        if (taqueroCanWorkOnOrder(taqueroWithName(taqueroName), order)) {\r\n          // Give him an order\r\n          // Catch conflict when order was no longer part of it\r\n          if (!handlers.done.getAllOrders()[key].includes(order)) {\r\n            continue;\r\n          }\r\n          handlers[taqueroName].setOrders([\r\n            order,\r\n            ...handlers.done.getAllOrders()[taqueroName],\r\n          ]);\r\n          allOrders[key].splice(j, 1);\r\n          handlers[key].setOrders(allOrders[key]);\r\n          log(`${taqueroName} was unoccupied, so I gave him something to do.`);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const log = (message) => {\r\n    logsHandler.log(\"Sistema de asignación:\", message);\r\n  };\r\n\r\n  const orderIsComplete = (order) => {\r\n    for (let i = 0; i < order.orden.length; i++) {\r\n      const part = order.orden[i];\r\n      if (part.status !== \"done\") return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const purgeQueue = async () => {\r\n    return new Promise((resolve) => {\r\n      sqs.purgeQueue({ QueueUrl }, () => {\r\n        resolve();\r\n      });\r\n    });\r\n  };\r\n\r\n  const receiveMessages = async () => {\r\n    return new Promise((resolve) => {\r\n      sqs.receiveMessage({ QueueUrl }, (err, data) => {\r\n        resolve(data.Messages);\r\n      });\r\n    });\r\n  };\r\n\r\n  const rejectOrder = (order, reazon) => {\r\n    log(\r\n      `Order ${\r\n        order.request_id ? order.request_id : \"with unknown id\"\r\n      } rejected due to: ${reazon}`\r\n    );\r\n    order.status = \"rejected\";\r\n    handlers.rejected.pushOrder(order);\r\n  };\r\n\r\n  const rejectPart = (partId, reazon) => {\r\n    log(\r\n      `Part ${partId ? partId : \"with unknown id\"} rejected due to: ${reazon}`\r\n    );\r\n  };\r\n\r\n  const sendMessage = async (order) => {\r\n    return new Promise((resolve) => {\r\n      sqs.sendMessage({ MessageBody: JSON.stringify(order), QueueUrl }, () =>\r\n        resolve()\r\n      );\r\n    });\r\n  };\r\n\r\n  const start = async () => {\r\n    // await purgeQueue(); // UNCOMMENT FOR DEV TESTS (Purges queue)\r\n    // await fillQueue(sampleInput); // UNCOMMENT FOR DEV TESTS (Fills queue with orders in JSON)\r\n\r\n    watchForOrdersToReallocate();\r\n    watchForUnoccupiedTaqueros();\r\n    while (true) {\r\n      const messages = await receiveMessages();\r\n      if (messages.length > 0) {\r\n        await deleteMessage(messages[0].ReceiptHandle);\r\n        const order = filteredOrder(JSON.parse(messages[0].Body));\r\n\r\n        if (order.invalid) continue;\r\n        if (order.orden.length === 0) {\r\n          handleEmptyOrder({ ...order });\r\n          continue;\r\n        }\r\n\r\n        allocateOrder(order);\r\n      } else {\r\n        log(\"There are no more orders\");\r\n        localStorage.setItem(\"gotAllOrders\", JSON.stringify(true));\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const taqueroCanWorkOnOrder = (taquero, order) => {\r\n    if (order.status !== \"open\") return;\r\n    for (let i = 0; i < order.orden.length; i++) {\r\n      const part = order.orden[i];\r\n      if (part.status !== \"open\") continue;\r\n      if (part.type === \"quesadilla\" && taquero.getQuesadillasInStock() === 0)\r\n        continue;\r\n      if (taquero.isResting()) continue;\r\n      if (taquero.canWorkOn.includes(part.meat)) {\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n\r\n  const taqueroWithName = (name) => {\r\n    for (let i = 0; i < taqueros.length; i++) {\r\n      const taquero = taqueros[i];\r\n      if (taquero.name === name) return taquero;\r\n    }\r\n  };\r\n\r\n  const watchForOrdersToReallocate = async () => {\r\n    while (true) {\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n      const orders = JSON.parse(localStorage.getItem(\"ordersToReAllocate\"));\r\n      let ordersLeft = [];\r\n      for (let i = 0; i < orders.length; i++) {\r\n        const order = orders[i];\r\n        if (!allocateOrder(order)) ordersLeft.push(order);\r\n      }\r\n      localStorage.setItem(\"ordersToReAllocate\", JSON.stringify(ordersLeft));\r\n      await timeout(100);\r\n    }\r\n  };\r\n\r\n  const watchForUnoccupiedTaqueros = async () => {\r\n    while (true) {\r\n      await timeout(1000);\r\n      // If RUDA is no longer working, break\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n      // If we are still receiving orders, continue\r\n      if (!JSON.parse(localStorage.getItem(\"gotAllOrders\"))) continue;\r\n\r\n      // Get unoccupied taqueros and do something about it;\r\n      const unoccupied = metadataHandler.getUnoccupiedTaqueros();\r\n      for (let i = 0; i < unoccupied.length; i++) {\r\n        const taqueroName = unoccupied[i];\r\n        await giveOrders(taqueroName);\r\n      }\r\n    }\r\n  };\r\n\r\n  return { start, insertTaquero, allocateOrder };\r\n};\r\nexport default Handler;\r\n","const Handler = (taqueroTypes, taqueros, logsHandler) => {\r\n  const fillings = [\"guacamole\", \"salsa\", \"cilantro\", \"cebolla\"];\r\n\r\n  const log = (chalanName, taqueroName, filling) => {\r\n    logsHandler.log(\r\n      `Chalan ${chalanName}:`,\r\n      `Filled ${taqueroName}'s' ${filling}`\r\n    );\r\n  };\r\n\r\n  const placeTortillas = async (chalan) => {\r\n    for (let i = 0; i < chalan.servesTaqueros.length; i++) {\r\n      const taquero = taqueroWithName(chalan.servesTaqueros[i]);\r\n      await taquero.fillFilling(\"tortillas\");\r\n      log(chalan.name, taquero.name, \"tortillas\");\r\n    }\r\n  };\r\n\r\n  const setup = () => {\r\n    let chalanes = {};\r\n    for (let i = 0; i < taqueroTypes.length; i++) {\r\n      const type = taqueroTypes[i];\r\n      if (chalanes[type.chalan] === undefined)\r\n        chalanes[type.chalan] = [type.name];\r\n      else chalanes[type.chalan].push(type.name);\r\n    }\r\n    chalanes = Object.keys(chalanes).map((key) => {\r\n      return { name: key, servesTaqueros: chalanes[key] };\r\n    });\r\n    return chalanes;\r\n  };\r\n\r\n  const start = () => {\r\n    const chalanes = setup();\r\n    chalanes.forEach((chalan) => startWorking(chalan));\r\n  };\r\n\r\n  const startWorking = async (chalan) => {\r\n    while (true) {\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n      await work(chalan);\r\n    }\r\n  };\r\n\r\n  const taqueroWithName = (name) => {\r\n    for (let i = 0; i < taqueros.length; i++) {\r\n      const taquero = taqueros[i];\r\n      if (taquero.name === name) return taquero;\r\n    }\r\n  };\r\n\r\n  const work = async (chalan) => {\r\n    let milisecs = 0;\r\n    let tempTime;\r\n    for (let i = 0; i < chalan.servesTaqueros.length; i++) {\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n      const taquero = taqueroWithName(chalan.servesTaqueros[i]);\r\n      for (let i = 0; i < fillings.length; i++) {\r\n        if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n        const filling = fillings[i];\r\n        tempTime = Date.now();\r\n        if (await taquero.fillFilling(filling))\r\n          log(chalan.name, taquero.name, filling);\r\n        milisecs += Date.now() - tempTime;\r\n        if (milisecs > 25_000 || taquero.getTortillas() < 15) {\r\n          await placeTortillas(chalan);\r\n          milisecs = 0;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return {\r\n    start,\r\n  };\r\n};\r\n\r\nexport default Handler;\r\n","// Styles\r\nimport \"../App.css\";\r\n\r\nconst Table = (props) => {\r\n  const { data } = props;\r\n  const headers =\r\n    data != null && data.length >= 1 ? Object.keys(data[0]) : null;\r\n\r\n  return headers ? (\r\n    <div className=\"table\">\r\n      <div className=\"tableRow\">\r\n        {headers.map((header) => (\r\n          <div className=\"cell cellHeader\" key={header}>\r\n            <p className=\"cellText cellTextHeader\">{header}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {data.map((row) => (\r\n        <div className=\"tableRow\" key={`${JSON.stringify(row)}`}>\r\n          {headers.map((header) => (\r\n            <div\r\n              className={`cell cell${data.indexOf(row) % 2}`}\r\n              key={`${header}_${row[header]}`}\r\n            >\r\n              <p className=\"cellText\">{row[header]}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  ) : (\r\n    <p className=\"noOrders\">(No orders)</p>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","// BY:\n//   Ulises Aviles T031438 (gh: ulisesaviles)\n//   David Dennis T026290 (gh: DavidDennisC)\n//   René Núñez T0322277 (gh: ReneN25)\n//   Abner Silva T032069 (gh: Godys05)\n\n// TO Make tests:\n// Uncomment lines 347 AND 348 from allocationAndBallancing.js\n//   (To load data from json to SQS before getting the data)\n// Set quesadilero time to 5000 in line 15 of quesadillero.js\n//   (To run everythung waaaay much faster)\n\n// React imports\nimport { useState, useEffect } from \"react\";\n\n// Styles\nimport \"./App.css\";\n\n// Objects\nimport Taquero from \"./objects/taquero\";\nimport Quesadillero from \"./objects/quesadillero\";\n\n// Handlers\nimport LogsHandler from \"./config/logsHandler\";\nimport AllocationHandler from \"./config/allocationAndBalancing\";\nimport OrdersHandler from \"./config/ordersStateHandler\";\nimport ChalanesHandler from \"./config/chalanesHandler\";\n\n// Components\nimport Table from \"./components/table\";\n\nconst App = () => {\n  // Config constants\n  const [isRunning, setIsRunning] = useState(false);\n  const [firstLoad, setFirstLoad] = useState(true);\n  const config = {\n    tacosNeededToRest: 1000,\n    fillingsTop: {\n      tortillas: 50,\n      cilantro: 200,\n      cebolla: 200,\n      salsa: 150,\n      guacamole: 100,\n    },\n  };\n  // Frontend-exclusive\n  const [chrono, setChrono] = useState(0);\n  const [logs, setLogs] = useState([]);\n  const logsHandler = LogsHandler(setLogs);\n  // Taqueros/orders-related\n  const taqueroTypes = [\n    { name: \"tripa y cabeza\", canWorkOn: [\"tripa\", \"cabeza\"], chalan: \"AMLO\" },\n    {\n      name: \"asada y suadero 1\",\n      canWorkOn: [\"asada\", \"suadero\"],\n      chalan: \"AMLO\",\n    },\n    {\n      name: \"asada y suadero 2\",\n      canWorkOn: [\"asada\", \"suadero\"],\n      chalan: \"Marina\",\n    },\n    {\n      name: \"adobada\",\n      canWorkOn: [\"adobada\"],\n      chalan: \"Marina\",\n    },\n  ];\n  const getDefaultQueuesFor = (types) => {\n    let orders = {};\n    for (let i = 0; i < types.length; i++) {\n      const type = types[i];\n      orders[type.name] = [];\n    }\n    orders.done = [];\n    orders.rejected = [];\n    return orders;\n  };\n  const defaultQueues = getDefaultQueuesFor(taqueroTypes);\n  const [orders, setOrders] = useState(defaultQueues);\n  const defaultTaqueroMetadata = {\n    workingOn: null,\n    queueLength: 0,\n    fan: {\n      active: true,\n      untilNeeded: 0,\n    },\n    rest: {\n      untilNeeded: 1000,\n      timeRested: 0,\n      resting: false,\n      tempResting: false,\n    },\n    tortillas: config.fillingsTop.tortillas,\n    quesadillasInStock: 0,\n    fillings: {\n      salsa: config.fillingsTop.salsa,\n      guacamole: config.fillingsTop.guacamole,\n      cilantro: config.fillingsTop.cilantro,\n      cebolla: config.fillingsTop.cebolla,\n    },\n  };\n  const defaultQuesadilleroMetadata = {\n    fan: {\n      active: true,\n      untilNeeded: 0,\n    },\n    tortillas: 50,\n    quesadillasReady: 0,\n  };\n  const getDefaultMetadataFor = (types) => {\n    let metadata = {};\n    for (let i = 0; i < types.length; i++) {\n      const type = types[i];\n      metadata[type.name] = { ...defaultTaqueroMetadata, chalan: type.chalan };\n    }\n    metadata[\"quesadillero\"] = defaultQuesadilleroMetadata;\n    return metadata;\n  };\n  const [metadata, setMetadata] = useState(getDefaultMetadataFor(taqueroTypes));\n  const taqueros = taqueroTypes.map((type) =>\n    Taquero(\n      type.name,\n      type.canWorkOn,\n      setOrders,\n      setMetadata,\n      logsHandler,\n      config.fillingsTop\n    )\n  );\n  const quesadillero = Quesadillero(\n    setMetadata,\n    taqueros,\n    config.fillingsTop.tortillas\n  );\n  const allocationBalanceHandler = AllocationHandler(\n    taqueros,\n    taqueroTypes,\n    logsHandler,\n    setOrders,\n    setMetadata\n  );\n  const chalanesHandler = ChalanesHandler(taqueroTypes, taqueros, logsHandler);\n\n  // Functions\n  const capitalize = (str = \"\") => {\n    return `${str.charAt(0).toUpperCase()}${str.substring(1, str.length)}`;\n  };\n\n  const cleanLogs = () => {\n    localStorage.setItem(\"logs\", JSON.stringify([]));\n    setLogs([]);\n  };\n\n  const cleanRUDA = () => {\n    cleanLogs();\n    restartMetadata();\n    restartOrders();\n    localStorage.setItem(\"gotAllOrders\", JSON.stringify(false));\n  };\n\n  const formatOrderForTable = (order_) => {\n    let order = { ...order_ };\n    order.datetime = formatTimeForLogs(order.datetime);\n    order.parts = order.orden.length;\n    order.finishedParts = 0;\n    order.productQuantity = 0;\n    for (let i = 0; i < order.orden.length; i++) {\n      const part = order.orden[i];\n      if (part.status === \"done\") order.finishedParts++;\n      order.productQuantity += part.quantity;\n    }\n    delete order.orden;\n    order.stepsDone = order.response !== undefined ? order.response.length : 0;\n    delete order.response;\n    return order;\n  };\n\n  const formatOrdersForTable = (orders) => {\n    let res = [];\n    for (let i = 0; i < orders.length; i++) {\n      if (orders[i] == null) continue;\n      res.push(formatOrderForTable(orders[i]));\n    }\n    return res;\n  };\n\n  const formatTimeForLogs = (timestamp) => {\n    const date = new Date(timestamp);\n    return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()} (${date.getMilliseconds()}ms)`;\n  };\n\n  const ordersAreFinished = () => {\n    for (let i = 0; i < taqueros.length; i++) {\n      if (taqueros[i].getQueueSize() > 0) return false;\n    }\n    if (JSON.parse(localStorage.getItem(\"ordersToReAllocate\")).length > 0)\n      return false;\n    if (!JSON.parse(localStorage.getItem(\"gotAllOrders\"))) return false;\n    return true;\n  };\n\n  const restartMetadata = () => {\n    setMetadata(getDefaultMetadataFor(taqueroTypes));\n    localStorage.setItem(\n      \"metadata\",\n      JSON.stringify(getDefaultMetadataFor(taqueroTypes))\n    );\n  };\n\n  const restartOrders = () => {\n    OrdersHandler(setOrders, null, defaultQueues).restartRUDA();\n  };\n\n  const setup = () => {\n    // Set initial local storage values\n    localStorage.setItem(\"orders\", JSON.stringify(defaultQueues));\n    localStorage.setItem(\"logs\", JSON.stringify([]));\n    localStorage.setItem(\n      \"metadata\",\n      JSON.stringify(getDefaultMetadataFor(taqueroTypes))\n    );\n    localStorage.setItem(\"ordersToReAllocate\", JSON.stringify([]));\n    localStorage.setItem(\"gotAllOrders\", JSON.stringify(false));\n  };\n\n  const startRUDA = async () => {\n    if (isRunning) return;\n    setIsRunning(true);\n    cleanRUDA();\n    localStorage.setItem(\"RUDAIsWorking\", JSON.stringify(true));\n\n    // Start chalanes\n    chalanesHandler.start();\n\n    // Start Allocation and balance handler\n    allocationBalanceHandler.start();\n\n    // Start every taquero\n    for (let i = 0; i < taqueros.length; i++) {\n      taqueros[i].startWorking();\n    }\n    // Start quesadillero\n    quesadillero.start();\n    // Start loop until everything is done\n    let counter = 0;\n    while (true) {\n      const now = Date.now();\n      await timeout(100);\n      if (ordersAreFinished()) {\n        localStorage.setItem(\"RUDAIsWorking\", JSON.stringify(false));\n        break;\n      }\n      counter += Date.now() - now;\n      setChrono((counter / 1000).toFixed(1));\n    }\n    setIsRunning(false);\n    logsHandler.log(\"RUDA is done😎\");\n    console.log(OrdersHandler().getAllOrders().done);\n  };\n\n  const timeout = (ms) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  };\n\n  // Logic\n  // eslint-disable-next-line\n  useEffect(() => {\n    if (firstLoad) {\n      setFirstLoad(false);\n      setup();\n    }\n  });\n\n  // Render\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <img\n          src=\"https://raw.githubusercontent.com/ulisesaviles/os-tacoshop-ruda/main/RUDA.png\"\n          className=\"logo\"\n          alt=\"logo\"\n        />\n        {!isRunning ? (\n          <button onClick={startRUDA} className=\"startBtn\">\n            Start RUDA\n          </button>\n        ) : (\n          <div className=\"running\">Running RUDA...</div>\n        )}\n        <p className=\"chrono\">({chrono}s)</p>\n      </div>\n      <div className=\"contentContainer\">\n        <div className=\"contentLeftContainer\">\n          <div className=\"taquerosContainer\">\n            {/* Taqueros */}\n            {taqueroTypes.map((taqueroType) => {\n              const index = taqueroTypes.indexOf(taqueroType);\n              return (\n                <div key={index} className=\"taqueroContainer\">\n                  <h4 className=\"taqueroName\">Taquero de {taqueroType.name}</h4>\n                  <div className=\"taqueroMetadataContainer\">\n                    <h3 className=\"metadata\">Metadata</h3>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">\n                        Orders in list:\n                      </h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].queueLength}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Working on:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].workingOn === null\n                          ? \"null\"\n                          : metadata[taqueroType.name].workingOn}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Fan active:</h6>\n                      <p className=\"actualMetadata\">\n                        {JSON.stringify(metadata[taqueroType.name].fan.active)}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Chalán:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].chalan}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Resting:</h6>\n                      <p className=\"actualMetadata\">\n                        {JSON.stringify(\n                          metadata[taqueroType.name].rest.resting ||\n                            metadata[taqueroType.name].rest.tempResting\n                        )}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Time rested:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].rest.timeRested}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">\n                        Tacos untill rest:\n                      </h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].rest.untilNeeded}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">\n                        Quesadillas in stock:\n                      </h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].quesadillasInStock}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Tortillas</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].tortillas}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Cilantro:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].fillings.cilantro}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Cebolla:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].fillings.cebolla}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Salsa:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].fillings.salsa}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Guacamole:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].fillings.guacamole}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n\n            {/* Quesadillero */}\n            <div className=\"taqueroContainer\">\n              <h4 className=\"taqueroName\">Quesadillero</h4>\n              <div className=\"taqueroMetadataContainer\">\n                <h3 className=\"metadata\">Metadata</h3>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">\n                    Ready quesadillas:\n                  </h6>\n                  <p className=\"actualMetadata\">\n                    {metadata.quesadillero.quesadillasReady}\n                  </p>\n                </div>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">Fan active:</h6>\n                  <p className=\"actualMetadata\">\n                    {JSON.stringify(metadata.quesadillero.fan.active)}\n                  </p>\n                </div>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">Tortillas</h6>\n                  <p className=\"actualMetadata\">\n                    {metadata.quesadillero.tortillas}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Orders */}\n          <h2 className=\"orders\">Orders</h2>\n          <div className=\"ordersContainer\">\n            {Object.keys(orders).map((key) => (\n              <div key={key} className=\"tableSuperContainer\">\n                <p className=\"tableName\">{capitalize(key)}</p>\n                <Table data={formatOrdersForTable([...orders[key]])} />\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Logs */}\n        <div className=\"logsContainer\">\n          <h2 className=\"logsTitle\">Logs:</h2>\n          <p className=\"logsSubtitle\">(De más nuevo a más viejo)</p>\n          <div className=\"logsContentContainer\">\n            {logs.map((log) => {\n              const index = logs.indexOf(log);\n              return (\n                <div className=\"logContainer\" key={index}>\n                  <div className=\"logHeaderContainer\">\n                    <h5 className=\"logTitle\">{log.title}</h5>\n                    <p className=\"logTime\">{formatTimeForLogs(log.time)}</p>\n                  </div>\n                  {log.message}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}