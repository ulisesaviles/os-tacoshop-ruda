{"version":3,"sources":["config/ordersStateHandler.js","config/metadataHandler.js","objects/taquero.js","objects/quesadillero.js","config/logsHandler.js","config/allocationAndBalancing.js","config/chalanesHandler.js","components/table.js","App.js","index.js"],"names":["Handler","setOrdersFunction","taqueroType","defaultQueues","getOrders","orders","localStorage","getItem","JSON","parse","getAllOrders","setOrders","generalOrders","setItem","stringify","pushOrder","order","push","restartRUDA","setMetadataFunction","taqueroName","timeout","ms","Promise","resolve","setTimeout","consumeFillings","fillingNames","a","metadata","getMetadata","i","length","fillingName","fillings","setMetadata","attribute","value","generalMetadata","useTortilla","tortillas","madeTacos","quantity","queueLength","workingOn","rest","untilNeeded","fan","Taquero","name","canWorkOn","ordersSetter","logsHandler","fillingsTop","ordersHandler","OrdersHandler","metadataHandler","MetadataHandler","queue","fillFilling","filling","fillingNeedsToBeFilled","console","log","times","guacamole","salsa","cilantro","cebolla","newFillings","getQuesadillasInStock","quesadillasInStock","getPartToParticipate","parts","part","includes","meat","status","type","hasEnoughFillings","ingredients","message","putFillings","reAllocateOrder","request_id","rest1Second","meta","timeRested","startWorking","workOnNextOrder","orden","partIndex","shift","start","Date","now","part_id","finished_products","newStock","response","who","when","toISOString","what","time","insertToQueue","newElements","getQueueSize","giveQuesadilla","restart","Quesadillero","taqueros","maxTortillas","getReadyQuesadillas","quesadillasReady","getTortillas","watchForSpaceToPutQuesadillas","currentTortillas","min","index","taquero","setLogsFunction","title","logs","unshift","taqueroTypes","validMeatTypes","res","j","meatType","getValidMeatTipesForTaqueros","validIngredients","handlers","rejected","done","allocateOrder","listSize","taqueroIndex","taqueroCanWorkOnOrder","insertTaquero","orderIsComplete","completeOrder","handleEmptyOrder","filteredOrder","invalid","tacoCounter","rejectOrder","datetime","toString","aPartIsInvalid","split","orderId","subOrderId","parseInt","rejectPart","cuantity","ingredient","delay_counter","temp","e","reazon","partId","watchForOrdersToReallocate","ordersLeft","input","chalanName","placeTortillas","chalan","servesTaqueros","taqueroWithName","work","milisecs","tempTime","chalanes","undefined","Object","keys","map","key","setup","forEach","Table","props","data","headers","className","header","row","indexOf","App","useState","isRunning","setIsRunning","firstLoad","setFirstLoad","config","chrono","setChrono","setLogs","LogsHandler","types","getDefaultQueuesFor","defaultTaqueroMetadata","active","defaultQuesadilleroMetadata","getDefaultMetadataFor","quesadillero","allocationBalanceHandler","AllocationHandler","chalanesHandler","ChalanesHandler","capitalize","str","charAt","toUpperCase","substring","cleanRUDA","restartMetadata","restartOrders","formatOrderForTable","order_","formatTimeForLogs","finishedParts","productQuantity","stepsDone","formatOrdersForTable","timestamp","date","getHours","getMinutes","getSeconds","getMilliseconds","ordersAreFinished","startRUDA","sampleInput","counter","toFixed","useEffect","src","alt","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01d84f04.chunk.js","sourcesContent":["const Handler = (setOrdersFunction, taqueroType, defaultQueues) => {\r\n  const getOrders = () => {\r\n    const orders = localStorage.getItem(\"orders\");\r\n    return JSON.parse(orders);\r\n  };\r\n\r\n  const pushOrder = (order) => {\r\n    let generalOrders = getOrders();\r\n    generalOrders[taqueroType].push(order);\r\n    setOrdersFunction(generalOrders);\r\n    localStorage.setItem(\"orders\", JSON.stringify(generalOrders));\r\n  };\r\n\r\n  const restartRUDA = () => {\r\n    setOrdersFunction(defaultQueues);\r\n    localStorage.setItem(\"orders\", JSON.stringify(defaultQueues));\r\n  };\r\n\r\n  const setOrders = (orders) => {\r\n    let generalOrders = getOrders();\r\n    generalOrders[taqueroType] = orders;\r\n    setOrdersFunction(generalOrders);\r\n    localStorage.setItem(\"orders\", JSON.stringify(generalOrders));\r\n  };\r\n\r\n  return { getAllOrders: getOrders, setOrders, pushOrder, restartRUDA };\r\n};\r\n\r\nexport default Handler;\r\n","const Handler = (setMetadataFunction, taqueroName) => {\r\n  const timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\n  const consumeFillings = async (fillingNames) => {\r\n    let metadata = getMetadata();\r\n    for (let i = 0; i < fillingNames.length; i++) {\r\n      const fillingName = fillingNames[i];\r\n      metadata[taqueroName].fillings[fillingName]--;\r\n      await timeout(500);\r\n      setMetadata(\"fillings\", metadata[taqueroName].fillings);\r\n    }\r\n  };\r\n\r\n  const getMetadata = () => {\r\n    const metadata = localStorage.getItem(\"metadata\");\r\n    return JSON.parse(metadata);\r\n  };\r\n\r\n  const madeTacos = (quantity) => {\r\n    let metadata = getMetadata();\r\n    // One less order in queue\r\n    metadata[taqueroName].queueLength--;\r\n    // Not working on any\r\n    metadata[taqueroName].workingOn = null;\r\n    // One taco less in rest\r\n    metadata[taqueroName].rest.untilNeeded -= quantity;\r\n    // One taco less in fan\r\n    metadata[taqueroName].fan.untilNeeded -= quantity;\r\n    // Set it\r\n    setMetadataFunction(metadata);\r\n    localStorage.setItem(\"metadata\", JSON.stringify(metadata));\r\n  };\r\n\r\n  const setMetadata = (attribute, value) => {\r\n    let generalMetadata = getMetadata();\r\n    generalMetadata[taqueroName][attribute] = value;\r\n    setMetadataFunction(generalMetadata);\r\n    localStorage.setItem(\"metadata\", JSON.stringify(generalMetadata));\r\n  };\r\n\r\n  const useTortilla = () => {\r\n    let metadata = getMetadata();\r\n    metadata[taqueroName].tortillas--;\r\n    setMetadata(\"tortillas\", metadata[taqueroName].tortillas);\r\n  };\r\n\r\n  return { getMetadata, setMetadata, consumeFillings, useTortilla, madeTacos };\r\n};\r\n\r\nexport default Handler;\r\n","// Handlers\r\nimport OrdersHandler from \"../config/ordersStateHandler\";\r\nimport MetadataHandler from \"../config/metadataHandler\";\r\n\r\n// Actual object\r\nconst Taquero = (\r\n  name,\r\n  canWorkOn,\r\n  ordersSetter,\r\n  setMetadataFunction,\r\n  logsHandler,\r\n  fillingsTop\r\n) => {\r\n  // Handlers and helpers inicialization\r\n  const timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n  const ordersHandler = OrdersHandler(ordersSetter, name);\r\n  const metadataHandler = MetadataHandler(setMetadataFunction, name);\r\n\r\n  // Attributes\r\n  let queue = [];\r\n\r\n  // Functions\r\n  const fillFilling = async (filling) => {\r\n    if (!fillingNeedsToBeFilled(filling)) {\r\n      console.log(`${name}'s ${filling} is full`);\r\n      await timeout(100);\r\n      return;\r\n    }\r\n    const times = {\r\n      guacamole: 25,\r\n      salsa: 15,\r\n      cilantro: 10,\r\n      cebolla: 10,\r\n      tortillas: 10,\r\n    };\r\n    if (filling !== \"tortillas\") {\r\n      let newFillings = metadataHandler.getMetadata()[name].fillings;\r\n      newFillings[filling] = fillingsTop[filling];\r\n      await timeout(times[filling] * 1000);\r\n      metadataHandler.setMetadata(\"fillings\", newFillings);\r\n    } else {\r\n      await timeout(times.tortillas * 1000);\r\n      metadataHandler.setMetadata(\"tortillas\", fillingsTop.tortillas);\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const fillingNeedsToBeFilled = (filling) => {\r\n    if (filling !== \"tortillas\")\r\n      return (\r\n        metadataHandler.getMetadata()[name].fillings[filling] <\r\n        fillingsTop[filling]\r\n      );\r\n    return (\r\n      metadataHandler.getMetadata()[name].tortillas < fillingsTop.tortillas\r\n    );\r\n  };\r\n\r\n  const getOrders = () => {\r\n    return ordersHandler.getAllOrders()[name];\r\n  };\r\n\r\n  const getQuesadillasInStock = () => {\r\n    return metadataHandler.getMetadata()[name].quesadillasInStock;\r\n  };\r\n\r\n  const getPartToParticipate = (parts) => {\r\n    for (let i = 0; i < parts.length; i++) {\r\n      const part = parts[i];\r\n      if (\r\n        canWorkOn.includes(part.meat) &&\r\n        part.status !== \"done\" &&\r\n        (part.type !== \"quesadilla\" || getQuesadillasInStock() >= 1)\r\n      ) {\r\n        return [part, i];\r\n      }\r\n    }\r\n    return [null, null];\r\n  };\r\n\r\n  const giveQuesadilla = () => {\r\n    const newStock = metadataHandler.getMetadata()[name].quesadillasInStock + 1;\r\n    metadataHandler.setMetadata(\"quesadillasInStock\", newStock);\r\n  };\r\n\r\n  const hasEnoughFillings = (ingredients) => {\r\n    const fillings = metadataHandler.getMetadata()[name].fillings;\r\n    for (let i = 0; i < ingredients.length; i++) {\r\n      const ingredient = ingredients[i];\r\n      if (fillings[ingredient] === 0) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const insertToQueue = (newElements) => {\r\n    queue = [...getOrders(), ...newElements];\r\n    ordersHandler.setOrders(queue);\r\n    log(`Inserted ${newElements.length} element(s) succesfully`);\r\n    metadataHandler.setMetadata(\"queueLength\", queue.length);\r\n    return queue;\r\n  };\r\n\r\n  const log = (message) => {\r\n    logsHandler.log(`Taquero ${name}:`, message);\r\n  };\r\n\r\n  const putFillings = async (part) => {\r\n    await metadataHandler.consumeFillings(part.ingredients);\r\n  };\r\n\r\n  const reAllocateOrder = async (order) => {\r\n    log(`I'll give order ${order.request_id} to allocation handler`);\r\n    const orders = JSON.parse(localStorage.getItem(\"ordersToReAllocate\"));\r\n    localStorage.setItem(\r\n      \"ordersToReAllocate\",\r\n      JSON.stringify([...orders, order])\r\n    );\r\n  };\r\n\r\n  const restart = () => {\r\n    ordersHandler.setOrders([]);\r\n  };\r\n\r\n  const rest1Second = async () => {\r\n    await timeout(1000);\r\n    let meta = metadataHandler.getMetadata()[name];\r\n    meta.rest.timeRested++;\r\n    metadataHandler.setMetadata(\"rest\", meta.rest);\r\n  };\r\n\r\n  const startWorking = async () => {\r\n    while (true) {\r\n      if (getOrders().length === 0) await rest1Second();\r\n      else await workOnNextOrder();\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n    }\r\n  };\r\n\r\n  const workOnNextOrder = async () => {\r\n    // Get orders\r\n    queue = getOrders();\r\n    // Make the first one's corresponding parts\r\n    const order = queue[0];\r\n    // Get a part to participate in\r\n    let [part, partIndex] = getPartToParticipate(order.orden);\r\n    if (\r\n      part === null ||\r\n      (part.type === \"quesadilla\" && getQuesadillasInStock() === 0)\r\n    ) {\r\n      reAllocateOrder(queue.shift());\r\n      ordersHandler.setOrders(queue);\r\n      await rest1Second();\r\n      return;\r\n    }\r\n    const start = Date.now();\r\n    // Start working on it\r\n    part.status = \"working\";\r\n    metadataHandler.setMetadata(\"workingOn\", part.part_id);\r\n    // Make the tacos\r\n    for (let i = 0; part.quantity > part.finished_products; i++) {\r\n      // If quesdilla, use 1\r\n      if (part.type === \"quesadilla\") {\r\n        if (getQuesadillasInStock() > 0) {\r\n          const newStock =\r\n            metadataHandler.getMetadata()[name].quesadillasInStock - 1;\r\n          metadataHandler.setMetadata(\"quesadillasInStock\", newStock);\r\n        } else {\r\n          part.status = \"open\";\r\n          break;\r\n        }\r\n      } else if (!hasEnoughFillings(part.ingredients)) {\r\n        log(`I have not enought fillings to continue`);\r\n        part.status = \"open\";\r\n        break;\r\n      } else {\r\n        // Taco time\r\n        metadataHandler.useTortilla();\r\n        await timeout(1000);\r\n      }\r\n      // Put fllings\r\n      await putFillings(part);\r\n      // Sum\r\n      part.finished_products += 1;\r\n      if (part.quantity === part.finished_products) part.status = \"done\";\r\n    }\r\n    part.status = part.status === \"done\" ? part.status : \"open\";\r\n    // Set it\r\n    queue[0].orden[partIndex] = part;\r\n    queue[0].response.push({\r\n      who: `Taquero de ${name}`,\r\n      when: new Date().toISOString(),\r\n      what: `Made ${part.finished_products} ${part.meat} ${part.type} (part ${part.part_id})`,\r\n      time: Date.now() - start,\r\n    });\r\n    reAllocateOrder(queue.shift());\r\n    ordersHandler.setOrders(queue);\r\n    metadataHandler.madeTacos(part.quantity);\r\n    // Log it\r\n    log(`Finished part \"${part.part_id}\" ${queue.length} left`);\r\n    // Return it\r\n    return queue.length;\r\n  };\r\n\r\n  // Actual object\r\n  return {\r\n    name,\r\n    insertToQueue,\r\n    getQueueSize: () => getOrders().length,\r\n    workOnNextOrder,\r\n    getOrders,\r\n    startWorking,\r\n    canWorkOn,\r\n    getQuesadillasInStock,\r\n    giveQuesadilla,\r\n    restart,\r\n    fillFilling,\r\n  };\r\n};\r\n\r\nexport default Taquero;\r\n","// Handlers\r\nimport MetadataHandler from \"../config/metadataHandler\";\r\n\r\nconst Quesadillero = (setMetadataFunction, taqueros, maxTortillas) => {\r\n  // Handlers and helpers inicialization\r\n  const timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n  const metadataHandler = MetadataHandler(setMetadataFunction, \"quesadillero\");\r\n  const taquerosQuesadillasSpace = 5;\r\n\r\n  const getReadyQuesadillas = () => {\r\n    return metadataHandler.getMetadata()[\"quesadillero\"].quesadillasReady;\r\n  };\r\n\r\n  const getTortillas = async () => {\r\n    await timeout(10_000);\r\n    metadataHandler.setMetadata(\"tortillas\", maxTortillas);\r\n  };\r\n\r\n  const saveQuesadilla = () => {\r\n    metadataHandler.setMetadata(\"quesadillasReady\", getReadyQuesadillas() + 1);\r\n  };\r\n\r\n  const start = async () => {\r\n    watchForSpaceToPutQuesadillas();\r\n    while (true) {\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n      // Get tortillas if needed\r\n      let currentTortillas =\r\n        metadataHandler.getMetadata()[\"quesadillero\"].tortillas;\r\n      if (currentTortillas === 0) {\r\n        await getTortillas();\r\n        currentTortillas =\r\n          metadataHandler.getMetadata()[\"quesadillero\"].tortillas;\r\n      }\r\n      // Use Tortillas\r\n      metadataHandler.setMetadata(\"tortillas\", currentTortillas - 1);\r\n      // Rest\r\n      let rest = metadataHandler.getMetadata()[\"quesadillero\"].rest;\r\n      rest.untilNeeded -= 1;\r\n      metadataHandler.setMetadata(\"rest\", rest);\r\n      await timeout(20_000); // Fucking long time to make a tortilla with cheese\r\n      let min = {\r\n        index: null,\r\n        quantity: 6,\r\n      };\r\n      for (let i = 0; i < taqueros.length; i++) {\r\n        const taquero = taqueros[i];\r\n        if (\r\n          taquero.getQuesadillasInStock() < min.quantity &&\r\n          taquero.getQuesadillasInStock() < taquerosQuesadillasSpace\r\n        )\r\n          min = { index: i, quantity: taquero.getQuesadillasInStock() };\r\n      }\r\n      if (min.index !== null) {\r\n        taqueros[min.index].giveQuesadilla();\r\n      } else saveQuesadilla();\r\n    }\r\n  };\r\n\r\n  const watchForSpaceToPutQuesadillas = async () => {\r\n    while (true) {\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n      let quesadillasReady = getReadyQuesadillas();\r\n      if (quesadillasReady > 0) {\r\n        // Iterate every taquero\r\n        for (let i = 0; i < taqueros.length; i++) {\r\n          const taquero = taqueros[i];\r\n          while (\r\n            taquero.getQuesadillasInStock() < taquerosQuesadillasSpace &&\r\n            quesadillasReady > 0\r\n          ) {\r\n            // Use ready quesadilla\r\n            metadataHandler.setMetadata(\r\n              \"quesadillasReady\",\r\n              getReadyQuesadillas() - 1\r\n            );\r\n            // Give it away\r\n            taquero.giveQuesadilla();\r\n            // rewrite quesadillas ready\r\n            quesadillasReady = getReadyQuesadillas();\r\n          }\r\n        }\r\n      }\r\n      await timeout(100);\r\n    }\r\n  };\r\n\r\n  return { start };\r\n};\r\n\r\nexport default Quesadillero;\r\n","const Handler = (setLogsFunction) => {\r\n  const log = (title, message) => {\r\n    let logs = JSON.parse(localStorage.getItem(\"logs\"));\r\n    logs.unshift({ title, message, time: Date.now() });\r\n    setLogsFunction(logs);\r\n    localStorage.setItem(\"logs\", JSON.stringify(logs));\r\n  };\r\n\r\n  return { log };\r\n};\r\n\r\nexport default Handler;\r\n","// Handlers\r\nimport OrdersHandler from \"../config/ordersStateHandler\";\r\n\r\nconst Handler = (taqueros, taqueroTypes, logsHandler, setOrdersFunction) => {\r\n  const timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\n  const getValidMeatTipesForTaqueros = (taqueroTypes) => {\r\n    let res = [];\r\n    for (let i = 0; i < taqueroTypes.length; i++) {\r\n      const type = taqueroTypes[i];\r\n      for (let j = 0; j < type.canWorkOn.length; j++) {\r\n        const meatType = type.canWorkOn[j];\r\n        if (!res.includes(meatType)) res.push(meatType);\r\n      }\r\n    }\r\n    return res;\r\n  };\r\n\r\n  const validMeatTypes = getValidMeatTipesForTaqueros(taqueroTypes);\r\n  const validIngredients = [\"cilantro\", \"cebolla\", \"salsa\", \"guacamole\"];\r\n  let handlers = {};\r\n  for (let i = 0; i < taqueroTypes.length; i++) {\r\n    const taqueroType = taqueroTypes[i];\r\n    handlers[taqueroType.name] = OrdersHandler(\r\n      setOrdersFunction,\r\n      taqueroType.name\r\n    );\r\n  }\r\n  handlers.rejected = OrdersHandler(setOrdersFunction, \"rejected\");\r\n  handlers.done = OrdersHandler(setOrdersFunction, \"done\");\r\n\r\n  const allocateOrder = (order) => {\r\n    let min = {\r\n      name: null,\r\n      listSize: taqueros[0].getQueueSize(),\r\n      taqueroIndex: -1,\r\n    };\r\n    for (let i = 0; i < taqueros.length; i++) {\r\n      const taquero = taqueros[i];\r\n      if (!taqueroCanWorkOnOrder(taquero, order)) continue;\r\n      if (taquero.getQueueSize() <= min.listSize) {\r\n        min = {\r\n          name: taquero.name,\r\n          listSize: taquero.getQueueSize(),\r\n          taqueroIndex: i,\r\n        };\r\n      }\r\n    }\r\n    if (min.name !== null) {\r\n      insertTaquero(min.taqueroIndex, [order]);\r\n      logsHandler.log(\r\n        \"Allocation and balancing:\",\r\n        `Asigned order ${order.request_id} to ${min.name}`\r\n      );\r\n      return true;\r\n    } else if (orderIsComplete(order)) {\r\n      completeOrder({ ...order });\r\n      return true;\r\n    } else {\r\n      const orders = JSON.parse(localStorage.getItem(\"ordersToReAllocate\"));\r\n      localStorage.setItem(\r\n        \"ordersToReAllocate\",\r\n        JSON.stringify([...orders, order])\r\n      );\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const completeOrder = (order) => {\r\n    order.status = \"done\";\r\n    handlers.done.pushOrder(order);\r\n    logsHandler.log(\r\n      \"Allocation and balancing:\",\r\n      `Order ${order.request_id} is done.`\r\n    );\r\n  };\r\n\r\n  const handleEmptyOrder = (order) => {\r\n    order.status = \"done\";\r\n    handlers.done.pushOrder(order);\r\n    logsHandler.log(\r\n      \"Allocation and balancing:\",\r\n      `Order ${order.request_id} was empty, so its done.`\r\n    );\r\n  };\r\n\r\n  const insertTaquero = (taqueroIndex, orders) => {\r\n    taqueros[taqueroIndex].insertToQueue(orders);\r\n  };\r\n\r\n  const filteredOrder = (order) => {\r\n    const invalid = { invalid: true };\r\n    let tacoCounter = 0;\r\n    const tacoMax = 300;\r\n    try {\r\n      if (typeof order.request_id !== \"number\" || order.request_id < 0) {\r\n        rejectOrder(order, \"invalid id\");\r\n        return invalid;\r\n      }\r\n      if (new Date(order.datetime).toString() === \"Invalid Date\") {\r\n        rejectOrder(order, \"invalid date\");\r\n        return invalid;\r\n      }\r\n      if (order.status !== \"open\") {\r\n        rejectOrder(order, `invalid status '${order.status}'`);\r\n        return invalid;\r\n      }\r\n      let aPartIsInvalid = false;\r\n      if (order.orden.length > 10) return invalid;\r\n      for (let i = 0; i < order.orden.length; i++) {\r\n        const part = order.orden[i];\r\n        tacoCounter += part.quantity;\r\n        if (tacoCounter > tacoMax) {\r\n          rejectOrder(order, \"the order has more than 300 products\");\r\n          return invalid;\r\n        }\r\n        const [orderId, subOrderId] = part.part_id.split(\"-\");\r\n        if (parseInt(orderId) !== order.request_id) {\r\n          rejectPart(null, \"Invalid Id\");\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (\r\n          parseInt(subOrderId) > order.orden.length ||\r\n          parseInt(subOrderId) !== i\r\n        ) {\r\n          rejectPart(null, \"Invalid Id\");\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (part.cuantity > 100) {\r\n          rejectPart(part.part_id, \"has more than 100 products\");\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (!validMeatTypes.includes(part.meat)) {\r\n          rejectPart(\r\n            part.part_id,\r\n            `\"${part.meat}\" is not a valid type of meat`\r\n          );\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (![\"taco\", \"quesadilla\"].includes(part.type)) {\r\n          rejectPart(\r\n            part.part_id,\r\n            `\"${part.type}\" is not a valid type of product`\r\n          );\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        if (part.status !== \"open\") {\r\n          rejectPart(\r\n            part.part_id,\r\n            `\"${part.status}\" is not a valid initial status`\r\n          );\r\n          aPartIsInvalid = true;\r\n          delete order.orden[i];\r\n          continue;\r\n        }\r\n        for (let j = 0; j < part.ingredients.length; j++) {\r\n          const ingredient = part.ingredients[j];\r\n          if (!validIngredients.includes(ingredient)) {\r\n            rejectPart(\r\n              part.part_id,\r\n              `\"${ingredient}\" is not a valid ingredient`\r\n            );\r\n            aPartIsInvalid = true;\r\n            delete order.orden[i];\r\n            continue;\r\n          }\r\n        }\r\n        order.orden[i].delay_counter = 0;\r\n        order.orden[i].finished_products = 0;\r\n        order.response = [];\r\n      }\r\n      if (aPartIsInvalid) {\r\n        const temp = order.orden;\r\n        order.orden = [];\r\n        for (let i = 0; i < temp.length; i++) {\r\n          const part = temp[i];\r\n          if (!part) continue;\r\n          order.orden.push(part);\r\n        }\r\n      }\r\n      return order;\r\n    } catch (e) {\r\n      return invalid;\r\n    }\r\n  };\r\n\r\n  const orderIsComplete = (order) => {\r\n    for (let i = 0; i < order.orden.length; i++) {\r\n      const part = order.orden[i];\r\n      if (part.status !== \"done\") return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const rejectOrder = (order, reazon) => {\r\n    logsHandler.log(\r\n      \"Allocation and balancing:\",\r\n      `Order ${\r\n        order.request_id ? order.request_id : \"with unknown id\"\r\n      } rejected due to: ${reazon}`\r\n    );\r\n    order.status = \"rejected\";\r\n    handlers.rejected.pushOrder(order);\r\n  };\r\n\r\n  const rejectPart = (partId, reazon) => {\r\n    logsHandler.log(\r\n      \"Allocation and balancing:\",\r\n      `Part ${partId ? partId : \"with unknown id\"} rejected due to: ${reazon}`\r\n    );\r\n  };\r\n\r\n  const start = (input) => {\r\n    watchForOrdersToReallocate();\r\n    for (let i = 0; i < input.length; i++) {\r\n      const order = filteredOrder(input[i]);\r\n      if (order.invalid) continue;\r\n      if (order.orden.length === 0) {\r\n        handleEmptyOrder({ ...order });\r\n        continue;\r\n      }\r\n      allocateOrder(order);\r\n    }\r\n  };\r\n\r\n  const taqueroCanWorkOnOrder = (taquero, order) => {\r\n    for (let i = 0; i < order.orden.length; i++) {\r\n      const part = order.orden[i];\r\n      if (part.status === \"done\") continue;\r\n      if (part.type === \"quesadilla\" && taquero.getQuesadillasInStock() === 0)\r\n        continue;\r\n      if (taquero.canWorkOn.includes(part.meat)) return true;\r\n    }\r\n  };\r\n\r\n  const watchForOrdersToReallocate = async () => {\r\n    while (true) {\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n      const orders = JSON.parse(localStorage.getItem(\"ordersToReAllocate\"));\r\n      let ordersLeft = [];\r\n      for (let i = 0; i < orders.length; i++) {\r\n        const order = orders[i];\r\n        if (!allocateOrder(order)) ordersLeft.push(order);\r\n      }\r\n      localStorage.setItem(\"ordersToReAllocate\", JSON.stringify(ordersLeft));\r\n      await timeout(100);\r\n    }\r\n  };\r\n\r\n  return { start, insertTaquero, allocateOrder };\r\n};\r\nexport default Handler;\r\n","const Handler = (taqueroTypes, taqueros, logsHandler) => {\r\n  const fillings = [\"guacamole\", \"salsa\", \"tortillas\", \"cilantro\", \"cebolla\"];\r\n\r\n  const log = (chalanName, taqueroName, filling) => {\r\n    logsHandler.log(\r\n      `Chalan ${chalanName}:`,\r\n      `Filled ${taqueroName}'s' ${filling}`\r\n    );\r\n  };\r\n\r\n  const placeTortillas = async (chalan) => {\r\n    for (let i = 0; i < chalan.servesTaqueros.length; i++) {\r\n      const taquero = taqueroWithName(chalan.servesTaqueros[i]);\r\n      await taquero.fillFilling(\"tortillas\");\r\n      log(chalan.name, taquero.name, \"tortillas\");\r\n    }\r\n  };\r\n\r\n  const setup = () => {\r\n    let chalanes = {};\r\n    for (let i = 0; i < taqueroTypes.length; i++) {\r\n      const type = taqueroTypes[i];\r\n      if (chalanes[type.chalan] === undefined)\r\n        chalanes[type.chalan] = [type.name];\r\n      else chalanes[type.chalan].push(type.name);\r\n    }\r\n    chalanes = Object.keys(chalanes).map((key) => {\r\n      return { name: key, servesTaqueros: chalanes[key] };\r\n    });\r\n    return chalanes;\r\n  };\r\n\r\n  const start = () => {\r\n    const chalanes = setup();\r\n    chalanes.forEach((chalan) => startWorking(chalan));\r\n  };\r\n\r\n  const startWorking = async (chalan) => {\r\n    while (true) {\r\n      if (!JSON.parse(localStorage.getItem(\"RUDAIsWorking\"))) break;\r\n      await work(chalan);\r\n    }\r\n  };\r\n\r\n  const taqueroWithName = (name) => {\r\n    for (let i = 0; i < taqueros.length; i++) {\r\n      const taquero = taqueros[i];\r\n      if (taquero.name === name) return taquero;\r\n    }\r\n  };\r\n\r\n  const work = async (chalan) => {\r\n    let milisecs = 0;\r\n    let tempTime;\r\n    for (let i = 0; i < chalan.servesTaqueros.length; i++) {\r\n      const taquero = taqueroWithName(chalan.servesTaqueros[i]);\r\n      for (let i = 0; i < fillings.length; i++) {\r\n        const filling = fillings[i];\r\n        tempTime = Date.now();\r\n        if (await taquero.fillFilling(filling))\r\n          log(chalan.name, taquero.name, filling);\r\n        milisecs += Date.now() - tempTime;\r\n        if (milisecs > 20_000) {\r\n          await placeTortillas(chalan);\r\n          milisecs = 0;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return {\r\n    start,\r\n  };\r\n};\r\n\r\nexport default Handler;\r\n","// Styles\r\nimport \"../App.css\";\r\n\r\nconst Table = (props) => {\r\n  const { data } = props;\r\n  const headers =\r\n    data != null && data.length >= 1 ? Object.keys(data[0]) : null;\r\n\r\n  return headers ? (\r\n    <div className=\"table\">\r\n      <div className=\"tableRow\">\r\n        {headers.map((header) => (\r\n          <div className=\"cell cellHeader\" key={header}>\r\n            <p className=\"cellText cellTextHeader\">{header}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {data.map((row) => (\r\n        <div className=\"tableRow\" key={`${JSON.stringify(row)}`}>\r\n          {headers.map((header) => (\r\n            <div\r\n              className={`cell cell${data.indexOf(row) % 2}`}\r\n              key={`${header}_${row[header]}`}\r\n            >\r\n              <p className=\"cellText\">{row[header]}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  ) : (\r\n    <p className=\"noOrders\">(No orders)</p>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","// React imports\nimport { useState, useEffect } from \"react\";\n\n// Styles\nimport \"./App.css\";\n\n// Objects\nimport Taquero from \"./objects/taquero\";\nimport Quesadillero from \"./objects/quesadillero\";\n\n// Handlers\nimport LogsHandler from \"./config/logsHandler\";\nimport AllocationHandler from \"./config/allocationAndBalancing\";\nimport OrdersHandler from \"./config/ordersStateHandler\";\nimport ChalanesHandler from \"./config/chalanesHandler\";\n\n// Components\nimport Table from \"./components/table\";\n\n// Sample input\nimport sampleInput from \"./samples/miniOrdenes.json\";\n\nconst App = () => {\n  // Config constants\n  const [isRunning, setIsRunning] = useState(false);\n  const [firstLoad, setFirstLoad] = useState(true);\n  const config = {\n    tacosNeededToRest: 1000,\n    fillingsTop: {\n      tortillas: 50,\n      cilantro: 200,\n      cebolla: 200,\n      salsa: 150,\n      guacamole: 100,\n    },\n  };\n  // Frontend-exclusive\n  const [chrono, setChrono] = useState(0);\n  const [logs, setLogs] = useState([]);\n  const logsHandler = LogsHandler(setLogs);\n  // Taqueros/orders-related\n  const taqueroTypes = [\n    { name: \"tripa y cabeza\", canWorkOn: [\"tripa\", \"cabeza\"], chalan: \"AMLO\" },\n    { name: \"cabeza y asada\", canWorkOn: [\"cabeza\", \"asada\"], chalan: \"AMLO\" },\n    {\n      name: \"asada y suadero\",\n      canWorkOn: [\"asada\", \"suadero\"],\n      chalan: \"Marina\",\n    },\n    {\n      name: \"suadero y adobada\",\n      canWorkOn: [\"suadero\", \"adobada\"],\n      chalan: \"Marina\",\n    },\n  ];\n  const getDefaultQueuesFor = (types) => {\n    let orders = {};\n    for (let i = 0; i < types.length; i++) {\n      const type = types[i];\n      orders[type.name] = [];\n    }\n    orders.done = [];\n    orders.rejected = [];\n    return orders;\n  };\n  const defaultQueues = getDefaultQueuesFor(taqueroTypes);\n  const [orders, setOrders] = useState(defaultQueues);\n  const defaultTaqueroMetadata = {\n    workingOn: null,\n    queueLength: 0,\n    fan: {\n      active: true,\n      untilNeeded: 0,\n    },\n    rest: {\n      untilNeeded: 1000,\n      timeRested: 0,\n    },\n    tortillas: config.fillingsTop.tortillas,\n    quesadillasInStock: 0,\n    fillings: {\n      salsa: config.fillingsTop.salsa,\n      guacamole: config.fillingsTop.guacamole,\n      cilantro: config.fillingsTop.cilantro,\n      cebolla: config.fillingsTop.cebolla,\n    },\n  };\n  const defaultQuesadilleroMetadata = {\n    fan: {\n      active: true,\n      untilNeeded: 0,\n    },\n    rest: {\n      untilNeeded: 1000,\n      timeRested: 0,\n    },\n    tortillas: 50,\n    quesadillasReady: 0,\n  };\n  const getDefaultMetadataFor = (types) => {\n    let metadata = {};\n    for (let i = 0; i < types.length; i++) {\n      const type = types[i];\n      metadata[type.name] = { ...defaultTaqueroMetadata, chalan: type.chalan };\n    }\n    metadata[\"quesadillero\"] = defaultQuesadilleroMetadata;\n    return metadata;\n  };\n  const [metadata, setMetadata] = useState(getDefaultMetadataFor(taqueroTypes));\n  const taqueros = taqueroTypes.map((type) =>\n    Taquero(\n      type.name,\n      type.canWorkOn,\n      setOrders,\n      setMetadata,\n      logsHandler,\n      config.fillingsTop\n    )\n  );\n  const quesadillero = Quesadillero(\n    setMetadata,\n    taqueros,\n    config.fillingsTop.tortillas\n  );\n  const allocationBalanceHandler = AllocationHandler(\n    taqueros,\n    taqueroTypes,\n    logsHandler,\n    setOrders\n  );\n  const chalanesHandler = ChalanesHandler(taqueroTypes, taqueros, logsHandler);\n\n  // Functions\n  const capitalize = (str = \"\") => {\n    return `${str.charAt(0).toUpperCase()}${str.substring(1, str.length)}`;\n  };\n\n  const cleanLogs = () => {\n    localStorage.setItem(\"logs\", JSON.stringify([]));\n    setLogs([]);\n  };\n\n  const cleanRUDA = () => {\n    cleanLogs();\n    restartMetadata();\n    restartOrders();\n  };\n\n  const formatOrderForTable = (order_) => {\n    let order = { ...order_ };\n    order.datetime = formatTimeForLogs(order.datetime);\n    order.parts = order.orden.length;\n    order.finishedParts = 0;\n    order.productQuantity = 0;\n    for (let i = 0; i < order.orden.length; i++) {\n      const part = order.orden[i];\n      if (part.status === \"done\") order.finishedParts++;\n      order.productQuantity += part.quantity;\n    }\n    delete order.orden;\n    order.stepsDone = order.response !== undefined ? order.response.length : 0;\n    delete order.response;\n    return order;\n  };\n\n  const formatOrdersForTable = (orders) => {\n    let res = [];\n    for (let i = 0; i < orders.length; i++) {\n      if (orders[i] == null) continue;\n      res.push(formatOrderForTable(orders[i]));\n    }\n    return res;\n  };\n\n  const formatTimeForLogs = (timestamp) => {\n    const date = new Date(timestamp);\n    return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()} (${date.getMilliseconds()}ms)`;\n  };\n\n  const ordersAreFinished = () => {\n    for (let i = 0; i < taqueros.length; i++) {\n      if (taqueros[i].getQueueSize() > 0) return false;\n    }\n    if (JSON.parse(localStorage.getItem(\"ordersToReAllocate\")).length > 0)\n      return false;\n    return true;\n  };\n\n  const restartMetadata = () => {\n    setMetadata(getDefaultMetadataFor(taqueroTypes));\n    localStorage.setItem(\n      \"metadata\",\n      JSON.stringify(getDefaultMetadataFor(taqueroTypes))\n    );\n  };\n\n  const restartOrders = () => {\n    OrdersHandler(setOrders, null, defaultQueues).restartRUDA();\n  };\n\n  const setup = () => {\n    // Set initial local storage values\n    localStorage.setItem(\"orders\", JSON.stringify(defaultQueues));\n    localStorage.setItem(\"logs\", JSON.stringify([]));\n    localStorage.setItem(\n      \"metadata\",\n      JSON.stringify(getDefaultMetadataFor(taqueroTypes))\n    );\n    localStorage.setItem(\"ordersToReAllocate\", JSON.stringify([]));\n  };\n\n  const startRUDA = async () => {\n    if (isRunning) return;\n    setIsRunning(true);\n    cleanRUDA();\n    localStorage.setItem(\"RUDAIsWorking\", JSON.stringify(true));\n\n    // Start chalanes\n    chalanesHandler.start();\n\n    // Start Allocation and balance handler\n    allocationBalanceHandler.start(sampleInput);\n\n    // Start every taquero\n    for (let i = 0; i < taqueros.length; i++) {\n      taqueros[i].startWorking();\n    }\n    // Start quesadillero\n    quesadillero.start();\n    // Start loop until everything is done\n    let counter = 0;\n    while (true) {\n      const now = Date.now();\n      await timeout(100);\n      if (ordersAreFinished()) {\n        localStorage.setItem(\"RUDAIsWorking\", JSON.stringify(false));\n        break;\n      }\n      counter += Date.now() - now;\n      setChrono((counter / 1000).toFixed(1));\n    }\n    setIsRunning(false);\n  };\n\n  const timeout = (ms) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  };\n\n  // Logic\n  // eslint-disable-next-line\n  useEffect(() => {\n    if (firstLoad) {\n      setFirstLoad(false);\n      setup();\n    }\n  });\n\n  // Render\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <img\n          src=\"https://raw.githubusercontent.com/ulisesaviles/os-tacoshop-ruda/main/RUDA.png\"\n          className=\"logo\"\n          alt=\"logo\"\n        />\n        {!isRunning ? (\n          <button onClick={startRUDA} className=\"startBtn\">\n            Start RUDA\n          </button>\n        ) : (\n          <div className=\"running\">Running RUDA...</div>\n        )}\n        <p className=\"chrono\">({chrono}s)</p>\n      </div>\n      <div className=\"contentContainer\">\n        <div className=\"contentLeftContainer\">\n          <div className=\"taquerosContainer\">\n            {/* Taqueros */}\n            {taqueroTypes.map((taqueroType) => {\n              const index = taqueroTypes.indexOf(taqueroType);\n              return (\n                <div key={index} className=\"taqueroContainer\">\n                  <h4 className=\"taqueroName\">Taquero de {taqueroType.name}</h4>\n                  <div className=\"taqueroMetadataContainer\">\n                    <h3 className=\"metadata\">Metadata</h3>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">\n                        Orders in queue:\n                      </h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].queueLength}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Working on:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].workingOn === null\n                          ? \"null\"\n                          : metadata[taqueroType.name].workingOn}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Fan active:</h6>\n                      <p className=\"actualMetadata\">\n                        {JSON.stringify(metadata[taqueroType.name].fan.active)}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Chalán:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].chalan}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Time rested:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].rest.timeRested}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">\n                        Tacos untill rest:\n                      </h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].rest.untilNeeded}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">\n                        Quesadillas in stock:\n                      </h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].quesadillasInStock}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Tortillas</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].tortillas}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Cilantro:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].fillings.cilantro}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Cebolla:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].fillings.cebolla}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Salsa:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].fillings.salsa}\n                      </p>\n                    </div>\n                    <div className=\"taqueroMetadataRowContainer\">\n                      <h6 className=\"taqueroMetadataRowTitle\">Guacamole:</h6>\n                      <p className=\"actualMetadata\">\n                        {metadata[taqueroType.name].fillings.guacamole}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n            {/* Quesadillero */}\n            <div className=\"taqueroContainer\">\n              <h4 className=\"taqueroName\">Quesadillero</h4>\n              <div className=\"taqueroMetadataContainer\">\n                <h3 className=\"metadata\">Metadata</h3>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">\n                    Ready quesadillas:\n                  </h6>\n                  <p className=\"actualMetadata\">\n                    {metadata.quesadillero.quesadillasReady}\n                  </p>\n                </div>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">Fan active:</h6>\n                  <p className=\"actualMetadata\">\n                    {JSON.stringify(metadata.quesadillero.fan.active)}\n                  </p>\n                </div>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">Time rested:</h6>\n                  <p className=\"actualMetadata\">\n                    {metadata.quesadillero.rest.timeRested}\n                  </p>\n                </div>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">\n                    Quesadillas untill rest:\n                  </h6>\n                  <p className=\"actualMetadata\">\n                    {metadata.quesadillero.rest.untilNeeded}\n                  </p>\n                </div>\n                <div className=\"taqueroMetadataRowContainer\">\n                  <h6 className=\"taqueroMetadataRowTitle\">Tortillas</h6>\n                  <p className=\"actualMetadata\">\n                    {metadata.quesadillero.tortillas}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <h2 className=\"orders\">Orders</h2>\n          <div className=\"ordersContainer\">\n            {Object.keys(orders).map((key) => (\n              <div key={key} className=\"tableSuperContainer\">\n                <p className=\"tableName\">{capitalize(key)}</p>\n                <Table data={formatOrdersForTable([...orders[key]])} />\n              </div>\n            ))}\n          </div>\n        </div>\n        <div className=\"logsContainer\">\n          <h2 className=\"logsTitle\">Logs:</h2>\n          <p className=\"logsSubtitle\">(De más nuevo a más viejo)</p>\n          <div className=\"logsContentContainer\">\n            {logs.map((log) => (\n              <div\n                className=\"logContainer\"\n                key={`${log.time}_${log.title}_${log.message}`}\n              >\n                <div className=\"logHeaderContainer\">\n                  <h5 className=\"logTitle\">{log.title}</h5>\n                  <p className=\"logTime\">{formatTimeForLogs(log.time)}</p>\n                </div>\n                {log.message}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n// TO-DO'S\n// FRI\n//   Rest\n//   Scheduler\n// SAT\n//   Balanceo (when taquero needs to rest)\n// SUN\n//   Doc and extras\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}